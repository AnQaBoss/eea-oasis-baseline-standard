openapi: 3.0.2
info:
  description: OASIS standard API specification for the Baseline Protocol
  license:
    name: CC0 1.0 Universal License
    url: https://raw.githubusercontent.com/ethereum-oasis/baseline-standard/main/LICENSE
  title: Baseline API
  version: v1.0.0
tags:
  - name: Baseline
    description: Baseline core Baseline provides internal integration middleware interfaces for baselining systems of record.
  - name: CCSM
    description: Baseline core CCSM API provides interfaces for general interaction with the underlying mainnet.
  - name: Privacy
    description: Baseline core privacy provides interfaces supporting general consistency, zero-knowledge cryptography protocols and secure multi-party computation (MPC).
  - name: Registry
    description: Baseline core registry API provides interfaces for the organization registry.
  - name: Vault
    description: |- 
      Baseline core vault API provides tools and methods for managing digital authentication credentials for `User`, `Organization` and `Workgroup` instances. 
paths:
  /accounts:
    get:
      deprecated: false
      description: 'Returns a list of `Account` instances in the authorized scope'
      operationId: listAccounts
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
      responses:
        '200':
          content:
            application/json; charset=UTF-8:
              schema:
                items:
                  $ref: '#/components/schemas/Account'
                type: array
          description: 'The request was successful and a list of accounts has been returned.'
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List accounts
      tags:
        - CCSM
    post:
      deprecated: false
      description: 'Creates an `Account` using the parameters provided in the request body'
      operationId: createAccount
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              key_id: '331156fb-fa5c-4557-ac39-69ae34c72c18'
              network_id: '66d44f30-9092-4182-a3c4-bc02736d6ae5'
              user_id: '7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c'
              vault_id: '190822c9-62f5-4caf-a419-df735a793b2f'
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '201':
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Account'
          description: The request was successful and a new account has been created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Create account
      tags:
        - CCSM
  /accounts/{id}:
    get:
      deprecated: false
      description: Retrieves details for a specified `Account`
      operationId: getAccountDetails
      parameters:
        - description: 'ID of a specific `Account` for which detailed information is desired; _UUID as specified by RFC4122_'
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: The request was successful and detailed information for the specified account has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get account details
      tags:
        - CCSM
  /contracts:
    get:
      deprecated: false
      description: Returns a list of smart contracts in the authorized scope
      operationId: listContracts
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
        - description: 'Flag to indicate if token contracts should be filtered from the response; default is true'
          explode: true
          in: query
          name: filter_tokens
          required: false
          schema:
            type: boolean
          style: form
        - description: 'Indicates how the response should be sorted; currently, recent is the only supported option and returns by accessed_at descending.'
          explode: true
          in: query
          name: sort
          required: false
          schema:
            type: string
          style: form
      responses:
        '200':
          content:
            application/json; charset=UTF-8:
              schema:
                items:
                  $ref: '#/components/schemas/Contract'
                type: array
          description: The request was successful and a list of smart contracts has been returned.
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: List contracts
      tags:
        - CCSM
    post:
      deprecated: false
      description: 'Deploys a contract using the parameters provided in the request body'
      operationId: deployContract
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              name: Shuttle
              network_id: '07102258-5e49-480e-86af-6d0c3260827d'
              params:
                abi:
                  anonymous: false
                  inputs:
                    indexed: false
                    internal_type: bytes
                    name: message
                    type: bytes
                  name: Ekho
                  type: event
                account_id: 'df83bcbb-ff5b-4c4c-b1f5-8ca6a61fe460'
                bytecode: 0x
                contract_name: Ekho
                outputs: []
                source: 0x
                state_mutability: 'nonpayable'
                type: 'function'
              pubsub_prefix: '57478604c134ef20b94dff84e52c0fd562ddae56cd50431339766819a7523d09'
              type: 'registry'
              workgroup_id: 'dc767890-0bbc-4c1d-bc04-f5842330018f'
            schema:
              $ref: '#/components/schemas/Contract'
        required: true
      responses:
        '201':
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Contract'
          description: The request was successful and the specified contract has been deployed.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Deploy contract
      tags:
        - CCSM
  /contracts/{id}:
    get:
      deprecated: false
      description: 'Retrieves details for a specified `Contract`'
      operationId: getContractDetail
      parameters:
        - description: 'ID of a specific `Contract` for which detailed information is desired; _UUID as specified by RFC4122_'
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Contract'
          description: The request was successful and detailed information about the specified contract has been returned.
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get contract detail
      tags:
        - CCSM
  /contracts/{id}/execute:
    post:
      deprecated: false
      description: 'Constructs and executes a specific method in a specific smart contract'
      operationId: executeContract
      parameters:
        - description: 'ID of a specific `Contract` containing the method to be executed; _UUID as specified by RFC4122_'
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example:
              account_id: '8a1f4492-9a73-4e3d-bafe-6a3794b1320e'
              method: broadcast
              params:
                - Example
              value: 0
            schema:
              $ref: '#/components/schemas/ExecuteContract'
        required: true
      responses:
        '202':
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ExecuteContract'
          description: |-
            The request was successful and processing will complete asynchronously.

            The API returns 202 Accepted if the contract execution will
            broadcast a transaction to the network and returns a ref, which is an identifier you may use to ask for the execution status of the transaction.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Execute contract
      tags:
        - CCSM
  /networks:
    get:
      deprecated: false
      description: Returns a list of available peer-to-peer `Network` instances
      operationId: listNetworks
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
        - $ref: '#/components/parameters/public'
      responses:
        '200':
          content:
            application/json; charset=UTF-8:
              schema:
                items:
                  $ref: '#/components/schemas/Network'
                type: array
          description: The request was successful and a list of networks has been returned.
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: List networks
      tags:
        - CCSM
    post:
      deprecated: false
      description: 'Creates a `Network` using the parameters provided in the request body'
      operationId: createNetwork
      requestBody:
        content:
          application/json:
            example:
              chain_id: '4'
              config:
                block_explorer_url: 'https://etherscan.io'
                chainspec_url: 'https://gist.githubusercontent.com/kthomas/3ac2e29ee1b2fb22d501ae7b52884c24/raw/161c6a9de91db7044fb93852aed7b0fa0e78e55f/mainnet.chainspec.json'
                engine_id: ethash
                is_ethereum_network: true
                json_rpc_url: 'https://mainnet.infura.io/v3/fde5e81d5d3141a093def423db3eeb33'
                native_currency: ETH
                network_id: '324cf211-6d67-4cae-b26c-c424308eabfa'
                platform: evm
                protocol_id: pow
                security:
                  egress: '*'
                  ingress:
                    0.0.0.0/0:
                      tcp:
                        - 8050
                        - 8051
                        - 30300
                      udp:
                        - 30300
                websocket_url: 'wss://mainnet.infura.io/ws/v3/egt7a93h1s2118n779lpp193dc2fwb69'
              description: 'A mainnet to serve an as example'
              enabled: true
              name: Example mainnet
            schema:
              $ref: '#/components/schemas/Network'
        required: true
      responses:
        '201':
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Network'
          description: The request was successful and a new network has been created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Create network
      tags:
        - CCSM
  /networks/{id}:
    put:
      deprecated: false
      description: 'Updates a specified `Network` using the parameters provided in the request body'
      operationId: updateNetwork
      parameters:
        - description: 'ID of a specific `Network` to be updated; _UUID as specified by RFC4122_'
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Network'
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NoContent'
          description: The request was successful and the specified network has been updated.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Update network
      tags:
        - CCSM
  /networks/{id}/status:
    get:
      deprecated: false
      description: 'Retrieves the syncing status and, if fully-synced, real-time metrics and metadata of a specified `Network`'
      operationId: getNetworkStatus
      parameters:
        - description: 'ID of a specific `Network` for which the status is desired; _UUID as specified by RFC4122_'
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/NetworkStatus'
          description: The request was successful and the status of the specified network has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get network status
      tags:
        - CCSM
  /objects:
    post:
      deprecated: false
      description: 'Creates a Baseline object using the parameters provided in the request body'
      operationId: createBaselineObject
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              baseline_id: af96a1bb-0c6d-4b6d-9b18-801d1db07a9d
              opcode: BLINE
              payload:
                proof: '8d8f7498db7aee910428c737d8427ac4add98353f981ca70db07697a091d8c23972b55b0b20fc0eebc1ac6c2ae427d783291c7fcb2e3f7417d279fea78ce1eac2d2293e53579abbef4960a1e290bd023e2999d8ff423d01080d449ce5d14ca89c94e277e8e0bb14fb91a0b71129920ae4411e77685287611f4d2aaf66b8fc5dc'
                type: general_consistency
                witness: {}
              type: general_consistency
            schema:
              $ref: '#/components/schemas/Object'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
          description: The request was successful and a new object was created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      servers:
        - url: 'https://baseline.proxy/api/v1'
      summary: 'Create a Baseline object'
      tags:
        - Baseline
  /objects/{id}:
    put:
      deprecated: false
      description: 'Updates a specific `Object` with the parameters provided in the request body'
      operationId: updateObject
      parameters:
        - description: 'ID of a specific `Object`; _UUID as specified by RFC4122_'
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
        required: true
      responses:
        '204':
          description: The request was successful and the specified object has been updated.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      servers:
        - url: 'https://baseline.proxy/api/v1'
      summary: Update object
      tags:
        - Baseline
  /organizations:
    get:
      deprecated: false
      description: 'Returns a list of `Organization` instances in the authorized scope'
      operationId: listOrganizations
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Organization'
                type: array
          description: The request was successful and a list of organizations has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: List organizations
      tags:
        - Registry
    post:
      deprecated: false
      description: 'Creates an `Organization` using the parameters provided in the request body'
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: The request was successful and a new organization has been created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Create organization
      tags:
        - Registry
  /organizations/{id}:
    get:
      deprecated: false
      description: 'Retrieves details for a specified `Organization`'
      operationId: getOrganizationDetails
      parameters:
        - description: 'ID of a specific `Organization` for which detailed information is desired; _UUID as specified by RFC4122_'
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Organization'
                type: array
          description: The request was successful and the details of the specified organization have been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Get organization details
      tags:
        - Registry
    put:
      deprecated: false
      description: 'Updates a specified `Organization` using the parameters provided in the request body'
      operationId: updateOrganizationDetails
      parameters:
        - description: 'ID of a specific `Organization` to be updated; _UUID as specified by RFC4122_'
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '204':
          description: The request was successful and the specified organization has been updated.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Update organization details
      tags:
        - Registry
  /provers:
    get:
      deprecated: false
      description: 'Returns a list of `Prover` instances in the authorized scope'
      operationId: listProvers
      parameters:
        - description: 'Filter the response by elliptic curve'
          explode: false
          in: query
          name: curve
          required: false
          schema:
            type: string
          style: form
        - description: 'Filter the response by identifier'
          explode: false
          in: query
          name: identifier
          required: false
          schema:
            type: string
          style: form
        - description: 'Filter the response by provider'
          explode: false
          in: query
          name: provider
          required: false
          schema:
            type: string
          style: form
        - description: 'Filter the response by proving scheme'
          explode: false
          in: query
          name: proving_scheme
          required: false
          schema:
            type: string
          style: form
        - description: 'Filter the response by the status'
          explode: false
          in: query
          name: status
          required: false
          schema:
            type: string
          style: form
      responses:
        '200':
          content:
            application/json; charset=UTF-8:
              schema:
                items:
                  $ref: '#/components/schemas/Prover'
                type: array
          description: The request was successful and a list of provers has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: List provers
      tags:
        - Privacy
    post:
      deprecated: false
      description: |-
        Creates a baseline `Prover` using the parameters provided in the request body

        Creating a prover entails compiling the prover from source, performing the appropriate setup or multiparty key ceremony and securely persist resulting artifacts.

        You must provision a `Prover` before it can be used to generate and verify proofs. The foregoing holds true regardless of which provider, proving_scheme, curve and prover identifier you specify (or source, if the raw source code of the `Prover` is provided instead of an identifier).

        A persistent store is implicitly initialized upon the creation of a new prover unless an existing store_id is provided and the referenced store is valid in the context of the prover and authorized scope.

        The parameters required to provision a `Prover` vary slightly across providers and proving schemes. Ensure you are using the `source` or `identifier` parameter properly for the selected `provider` and `proving_scheme`.
      operationId: createProver
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prover'
        required: true
      responses:
        '201':
          description: The request was successful and a new prover has been created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Create prover
      tags:
        - Privacy
  /provers/{id}:
    get:
      deprecated: false
      description: 'Retrieves details for a specific `Prover`'
      operationId: getProverDetails
      parameters:
        - description: 'ID of a specific `Prover`; _UUID as specified by RFC4122_'
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Prover'
          description: The request was successful and detailed information about the specified prover has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Get prover details
      tags:
        - Privacy
  /provers/{id}/notes/{index}:
    get:
      deprecated: false
      description: 'Retrieves the note at the given index within the dense merkle tree note store associated with the `Prover`'
      operationId: getNotesValue
      parameters:
        - description: .
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: 'The index of the leaf in the dense merkle tree for the underlying data structure'
          in: path
          name: index
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyProof'
          description: The request was successful and the note for the specified prover has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Retrieve notes value
      tags:
        - Privacy
  /provers/{id}/nullifiers/{index}:
    get:
      deprecated: false
      description: 'Retrieves the nullified note if one exists at the given index within the sparse merkle tree nullifier store associated with the `Prover`'
      operationId: getNullifierNote
      parameters:
        - description: ID of a specific `Prover`; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The index of the leaf in the sparse merkle tree for the underlying data structure
          in: path
          name: index
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyProof'
          description: The request was successful and the nullifier note for the specified prover has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Retrieve nullified note
      tags:
        - Privacy
  /provers/{id}/prove:
    post:
      deprecated: false
      description: |-
        Generates a cryptographic proof given a valid witness parameter; calling this API has an implicit side-effect of writing to the configured `Store`.
      operationId: generateProof
      parameters:
        - description: ID of a specific `Prover`; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                identifier:
                  type: string
                proving_scheme:
                  description: Proving scheme to be used
                  example: groth16
                  readOnly: false
                  type: string
                curve:
                  description: Pairing-friendly elliptic curve
                  example: BN254
                  readOnly: false
                  type: string                
                provider:
                  description: Circuit provider
                  example: gnark
                  readOnly: false
                  type: string
                name:
                  type: string
                  description: 'User-defined name for proof'
                store_id: 
                  description: 'ID of `Store` that will accept the generate proof'
                  format: uuid
                  type: string
                witness:
                  $ref: '#/components/schemas/Witness'
              type: object
        required: true
      responses:
        '200':
          description: The request was successful and a new proof has been created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: The API returns a 422 status code and human-readable error message(s) if (i) the witness parameters is not provided, (ii) required prover arguments (i.e., fields) are not included within the specific witness parameter or (iii) when Prover constraints are not satisfied.
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Generate Proof
      tags:
        - Privacy
  /provers/{id}/verify:
    post:
      deprecated: false
      description: Verifies a `Proof` using the `Witness` parameters provided in the request body
      operationId: verify
      parameters:
        - description: ID of a specific `Prover`; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyProof'
        required: true
      responses:
        '201':
          description: The request was successful and a verification result has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Verify
      tags:
        - Privacy
  /states:
    get:
      deprecated: false
      description: Returns a list of `State` objects in the authorized scope
      operationId: listStates
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/State'
                type: array
          description: The request was successful and a list of state objects has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      servers:
        - url: https://baseline.proxy/api/v1
      summary: List state objects
      tags:
        - Baseline
  /states/{id}:
    get:
      deprecated: false
      description: Retrieves details for a specific `State`
      operationId: getStateDetails
      parameters:
        - description: ID of a specific `State`; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/State'
                type: array
          description: The request was successful and detailed information about the specified state haws been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      servers:
        - url: https://baseline.proxy/api/v1
      summary: Get state details
      tags:
        - Baseline
  /transactions:
    get:
      deprecated: false
      description: Returns a list of `Transaction` instances in the authorized scope
      operationId: listTransactions
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
        - description: When true, contract creation transactions are filtered
          explode: true
          in: query
          name: filter_contract_creations
          required: false
          schema:
            type: boolean
          style: form
        - description: Comma-delimited list of statuses by which the transactions response is filtered
          explode: true
          in: query
          name: status
          required: false
          schema:
            type: string
          style: form
      responses:
        '200':
          content:
            application/json; charset=UTF-8:
              schema:
                items:
                  $ref: '#/components/schemas/Transaction'
                type: array
          description: The request was successful and a list of transactions has been returned.
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: List transactions
      tags:
        - CCSM
    post:
      deprecated: false
      description: >
        Creates and broadcast a transaction in a chain- and protocol-agnostic manner using the parameters provided in the request body


        This API provides an asynchronous, fault-tolerant mechanism for providing some guarantees about how a well-formed transaction will become eventually-consistent with the underlying target Network. Currently, transactions are guaranteed to be successfully broadcast to the target network or timeout within 5 minutes. If a transaction is unable to be broadcast to the network for any reason (i.e., network reachability, invalid nonce etc.) it is retried every 60 seconds. It is likely these
        retry and timeout constraints will be made more configurable in a future release.


        In addition to the asynchronous and resilient nature of broadcasting transactions using this API, instrumentation of the full transaction lifecycle is captured for each transaction.
      operationId: createTransaction
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        '201':
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: The request was successful and a new transaction has been created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Create transaction
      tags:
        - CCSM
  /transactions/{id}:
    get:
      deprecated: false
      description: Retrieves details for a specified `Transaction`
      operationId: getTransactionDetails
      parameters:
        - description: ID of a specific `Transaction` for which detailed information is desired; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: The request was successful and detailed information about the specified transaction has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Get transaction details
      tags:
        - CCSM
  /unseal:
    post:
      deprecated: false
      description: >
        Unseals a `Vault` and enables additional interaction within the authorized scope. 


        One sealing key is valid for all vaults within a single instance. The SEAL_UNSEAL_VALIDATION_HASH  environment variable contains a SHA-256 hash of the 256-bit entropy BIP39 seed phrase used for the seal/unseal key. When a valid sealing key is presented to the vault (i.e. one that has the same SHA-256 hash value as the SEAL_UNSEAL_VALIDATION_HASH environment variable), the seal/unseal key will then be cloaked (i.e., encrypted with a random, ephemeral, in-memory cloaking key) in memory and
        decrypted only when required for operations by the cloaking key.
      operationId: unsealVault
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnsealVault'
        required: true
      responses:
        '204':
          description: The request was successful and the corresponding vault has been unsealed.
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Unseal vault
      tags:
        - Vault
  /vaults:
    get:
      deprecated: false
      description: Returns a list of `Vault` instances in the authorized scope
      operationId: listVaults
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
      responses:
        '200':
          content:
            application/json; charset=UTF-8:
              schema:
                items:
                  $ref: '#/components/schemas/Vault'
                type: array
          description: The request was successful and a list of vaults has been returned.
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: List vaults
      tags:
        - Vault
    post:
      deprecated: false
      description: Creates a `Vault` instance using the parameters provided in the request body
      operationId: createVault
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              description: Example vault description
              name: Example vault name
            schema:
              $ref: '#/components/schemas/Vault'
        required: true
      responses:
        '201':
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Vault'
          description: The request was successful and a new vault has been created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Create vault
      tags:
        - Vault
  /vaults/{id}/keys:
    get:
      deprecated: false
      description: Returns a list of keys in a specific `Vault`
      operationId: listkeys
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
        - description: ID of a specific `Vault` that contains the desired keys ; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=UTF-8:
              schema:
                items:
                  $ref: '#/components/schemas/Key'
                type: array
          description: The request was successful and a list of keys for the specified vault has been returned.
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: List keys
      tags:
        - Vault
    post:
      deprecated: false
      description: Creates a `Key` in a specific `Vault`
      operationId: createKey
      parameters:
        - description: ID of a specific `Vault` in which a desired `Key` is to be created; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example:
              description: Secure channel for messaging
              name: Private chat
              spec: ChaCha20
              type: symmetric
              usage: encrypt/decrypt
              vault_id: ae3c07d9-8a41-4cd3-92c0-e6358cbd516c
            schema:
              $ref: '#/components/schemas/Key'
        required: true
      responses:
        '201':
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Key'
          description: The request was successful and a new key has been created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Create a key
      tags:
        - Vault
  /vaults/{id}/keys/{key_id}:
    delete:
      deprecated: false
      description: Deletes a specific `Key` in a specific `Vault`
      operationId: deleteKey
      parameters:
        - description: ID of a specific `Vault` that contains a specific `Key` to be deleted; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: ID of a specific `Key` to be deleted; _UUID as specified by RFC4122_
          in: path
          name: key_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The request was successful and the specified key has been deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Delete a key
      tags:
        - Vault
  /vaults/{id}/keys/{key_id}/derive:
    post:
      deprecated: false
      description: Creates a derived key from a specific `Key` in a specific `Vault`
      operationId: deriveaKeyRequest
      parameters:
        - description: ID of a specific `Vault` in which a derived key is to be created; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: ID of a specific `Key` to be used to create derived key; _UUID as specified by RFC4122_
          in: path
          name: key_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DerivedKey'
        required: true
      responses:
        '201':
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/DerivedKey'
          description: The request was successful and a new key has been derived.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Creates a derived key
      tags:
        - Vault
  /vaults/{id}/secrets:
    get:
      deprecated: false
      description: Returns a list of secrets stored in a specific `Vault`
      operationId: listSecrets
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
        - description: ID of a specific `Vault` in which the desired secrets are stored; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=UTF-8:
              schema:
                items:
                  $ref: '#/components/schemas/Vault'
                type: array
          description: The request was successful and a list of secrets has been returned.
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: List secrets
      tags:
        - Vault
    post:
      deprecated: false
      description: Stores a `Secret` in a specific `Vault`
      operationId: storeSecret
      parameters:
        - description: ID of a specific `Vault` in which to store a specific `Secret`; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
        required: true
      responses:
        '201':
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Secret'
          description: The request was successful and the secret has been stored.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Store secret
      tags:
        - Vault
  /vaults/{id}/secrets/{secret_id}:
    delete:
      deprecated: false
      description: Deletes a specific `Secret` from a specific `Vault`
      operationId: deleteSecret
      parameters:
        - description: ID of a specific `Vault` that contains a `Secret` to be deleted; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: ID of a specific `Secret` to be deleted; _UUID as specified by RFC4122_
          in: path
          name: secret_id
          required: true
          schema:
            type: string
      responses:
        '204':
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Secret'
          description: The request was successful and the specified secret has been deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Delete secret
      tags:
        - Vault
    get:
      deprecated: false
      description: Retrieves a specific `Secret` from a specific `Vault`
      operationId: retrieveSecret
      parameters:
        - description: ID of a specific `Vault` in which a specific `Secret` is stored; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: ID of a specific `Secret` to be retrieved; _UUID as specified by RFC4122_
          in: path
          name: secret_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Secret'
          description: The request was successful and the specified secret has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Retrieve secret
      tags:
        - Vault
  /wallets:
    get:
      deprecated: false
      description: Returns a list of `Wallet` instances
      operationId: listWallets
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
      responses:
        '200':
          content:
            application/json; charset=UTF-8:
              schema:
                items:
                  $ref: '#/components/schemas/Wallet'
                type: array
          description: The request was successful and a list of wallets has been returned.
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: List wallets
      tags:
        - CCSM
    post:
      deprecated: false
      description: |
        Creates a `Wallet` using the parameters provided in the request body. A `Wallet` may be setup as custodial or non-custodial. If the Wallet is custodial then the platform will derive addresses and securely persist an `Account` for each of those derived addresses
      operationId: createWallet
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Wallet'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
          description: The request was successful and a new wallet has been created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Create wallet
      tags:
        - CCSM
  /wallets/{id}/accounts:
    get:
      deprecated: false
      description: Returns a list of `Account` instances for a specific `Wallet`
      operationId: listWalletAccounts
      parameters:
        - $ref: '#/components/parameters/results-per-page'
        - description: ID of a specific `Wallet` containing `Account` instances; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=UTF-8:
              schema:
                items:
                  $ref: '#/components/schemas/Account'
                type: array
          description: The request was successful and a list of accounts has been returned.
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: List wallet accounts
      tags:
        - CCSM
  /workflows:
    get:
      description: Returns a list of `Workflow` instances in the authorized scope
      operationId: listWorkflows
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workflow'
                type: array
          description: The request was successful and a list of workflows has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: List workflow instances
      tags:
        - Baseline
    post:
      description: Creates a `Workflow` instance using the parameters provided in the request body
      operationId: createWorkflow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workflow'
      responses:
        '201':
          content:
            application/json:
              example:
                identifier: null
              schema:
                items:
                  $ref: '#/components/schemas/Workflow'
                type: array
          description: The request was successful and a new workflow has been created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Create workflow instance
      tags:
        - Baseline
  /workflows/{id}:
    get:
      description: Retrieves details for a specific `Workflow`
      operationId: getWorkflowDetails
      parameters:
        - description: ID of a specific `Workflow`; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
          description: The request was successful and detailed information about the specified workflow has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Get workflow details
      tags:
        - Baseline
  /workflows/{id}/worksteps:
    get:
      description: Returns a list of `Workstep` instances in a specific `Workflow` instance
      operationId: listWorksteps
      parameters:
        - description: ID of a specific `Workflow`; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workstep'
                type: array
          description: The request was successful and a list of workstep instances has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: List workstep instances
      tags:
        - Baseline
    post:
      description: Creates a `Workstep` instance using the parameters in the request body
      operationId: createWorkstep
      parameters:
        - description: ID of a specific `Workflow`; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example:
              participants:
                - $ref: '#/components/schemas/Participant'
              prover_id: dd615561-83e6-4f53-ac0f-aaf1749df139
              require_finality: true
              workflow_id: f9227803-5541-4c13-a554-f6980f03362a
            schema:
              $ref: '#/components/schemas/Workstep'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workstep'
          description: The request was successful and a new workstep was created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Create workstep instance
      tags:
        - Baseline
  /workflows/{id}/worksteps/{workstep_id}:
    get:
      description: Retrieves details for a specific `Workstep` in a specific `Workflow`
      operationId: getWorkstepDetails
      parameters:
        - description: ID of a specific `Workflow`; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: ID of a specific `Workstep`; _UUID as specified by RFC4122_
          in: path
          name: workstep_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workstep'
                type: object
          description: The request was successful and detailed information about the specified workstep has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Get workstep details
      tags:
        - Baseline
  /workgroups:
    get:
      deprecated: false
      description: Returns a list of `Workgroup` instances in the authorized scope
      operationId: listWorkgroups
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workgroup'
                type: array
          description: The request was successful and a list of workgroup instances has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: List workgroups
      tags:
        - Baseline
        - Registry
    post:
      deprecated: false
      description: Creates a `Workgroup` using the parameters provided in the request body
      operationId: createWorkgroup
      requestBody:
        content:
          application/json:
            example:
              description: An example of the request body for workgroup creation
              name: Example workgroup
              network_id: 07102258-5e49-480e-86af-6d0c3260827d
              type: baseline
            schema:
              $ref: '#/components/schemas/Workgroup'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workgroup'
          description: The request was successful and a new workgroup has been created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Create workgroup
      tags:
        - Baseline
        - Registry
  /workgroups/{id}:
    get:
      description: Retrieves details for a specific `Workgroup`
      operationId: getWorkgroupDetails
      parameters:
        - description: ID of a specific `Workgroup` for which detailed information is desired; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workgroup'
          description: The request was successful and detailed information about the specified workgroup has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Get workgroup details
      tags:
        - Baseline
        - Registry
    put:
      deprecated: false
      description: Updates a specific `Workgroup` using the parameters provided in the request body
      operationId: updateWorkgroup
      parameters:
        - description: ID of a specific `Workgroup` to be updated; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example:
              description: An example of the request body for updating a workgroup
              name: Example workgroup
              network_id: 07102258-5e49-480e-86af-6d0c3260827d
              type: baseline
            schema:
              $ref: '#/components/schemas/Workgroup'
      responses:
        '204':
          description: The request was successful and the specified workgroup has been updated.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Update workgroup
      tags:
        - Baseline
        - Registry
  /workgroups/{id}/users:
    get:
      deprecated: false
      description: Returns a list of `Organization` instances associated with a specific `Workgroup`
      operationId: listWorkgroupUsers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
        - description: ID of a specific `Workgroup`; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: The request was successful and a list of organizations has been returned.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: List workgroup users
      tags:
        - Baseline
        - Registry
    post:
      deprecated: false
      description: Associates an `Organization` to a specific `Workgroup`
      operationId: associateWorkgroupOrganization
      parameters:
        - description: ID of a specific `Workgroup` for which a specific `Organization` is to be associated; _UUID as specified by RFC4122_
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateWorkgroupOrganization'
        required: true
      responses:
        '201':
          description: The request was successful and the specified organization has been associated with the specified workgroup.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      summary: Associate workgroup organization
      tags:
        - Baseline
        - Registry
components:
  headers:
    X-Total-Results-Count:
      schema:
        description: Number of total query hits across all pages
        example: 14
        type: integer
  parameters:
    page:
      description: Limits resulting response to the page number specified
      in: query
      name: page
      required: false
      schema:
        type: integer
    public:
      description: When `TRUE`, limits results to non-private records
      in: query
      name: public
      required: false
      schema:
        type: boolean
    results-per-page:
      description: Sets the number of results included per page
      in: query
      name: rpp
      required: false
      schema:
        type: integer
  responses:
    Accepted:
      description: The request has been accepted for processing, but the processing has not been completed
    Forbidden:
      content:
        application/json:
          example:
            code: 403
            message: The supplied API Authorization header does not have permission to access the requested resource. Please verify that you have sufficient permissions and try again
          schema:
            properties:
              code:
                type: integer
              message:
                type: string
            type: object
      description: Forbidden
    InternalServerError:
      content:
        application/json:
          example:
            code: 500
            message: The requested resource is not implemented by the platform
          schema:
            properties:
              code:
                type: integer
              message:
                type: string
            type: object
      description: Not Implemented
    NoContent:
      description: The request was successful but did not return a response
    NotFound:
      content:
        application/json:
          example:
            code: 404
            message: Platform did not find the requested resource
          schema:
            properties:
              code:
                type: integer
              message:
                type: string
            type: object
      description: Not Found
    OK:
      description: The request was successful
    ServiceUnavailable:
      content:
        application/json:
          example:
            code: 503
            message: The request cannot be fulfilled due to temporary unavailability of a backend service
          schema:
            properties:
              code:
                type: integer
              message:
                type: string
            type: object
      description: Service Unavailable
    Success:
      description: The request was successful and a new entity was created
    TooManyRequests:
      content:
        application/json:
          schema:
            example:
              code: 429
              message: The request was not accepted due to exceeding the rate limit
            properties:
              code:
                type: integer
              message:
                type: string
            type: object
      description: Too many requests
    Unauthorized:
      content:
        application/json:
          example:
            code: 401
            message: The request required an API Authorization header, or one was provided which could not be authenticated
          schema:
            properties:
              code:
                type: integer
              message:
                type: string
            type: object
      description: Unauthorized
  schemas:
    Account:
      description: |-
        An arbitrary keypair capable of storing value on the underlying `Network`; also referred to as a signing identity.

        An `Account` may be setup as custodial or non-custodial, and may be derived from a `Wallet`. If the `Account` is custodial then the platform will sign and broadcast transactions to the specified network on behalf of an authorized `User` or `Workgroup`.        
      example:
        address: '0x4A252b7e30f6cD6a85d20476Bb291Ef7f3a05293'
        created_at: '2021-06-15T00:50:40.475580742Z'
        id: 99c404e9-fe10-4ca7-b787-d5943d03591c
        key_id: 331156fb-fa5c-4557-ac39-69ae34c72c18
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        public_key: '0x04f4c6bc6d79b727f2034ffaa7958a84d3bf88142a9d81b5baa18dc81f162c97c273f7acf8132a6a5aa9a81dcd3c485d6d17277a993334575d136f18171053792b'
        user_id: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        vault_id: 190822c9-62f5-4caf-a419-df735a793b2f
      properties:
        address:
          description: |-
            Address of the `Account`

            Implementations should consider how to support an increase from a 20-byte address to a 32-byte address.

            The following illustrates the schema of a 32-byte address:

              Byte 0: Version byte (8-bit padding; reserved for future)
              Byte 1-2: Reserved (16-bit reserved)
              Byte 3-5: Epoch (0 <= e <= 16777215)
              Byte 6-31: 26 byte hash
              
              See https://ethereum-magicians.org/t/increasing-address-size-from-20-to-32-bytes/5485
          example: '0x4A252b7e30f6cD6a85d20476Bb291Ef7f3a05293'
          readOnly: true
          type: string
        created_at:
          description: Timestamp of `Account` creation
          example: '2021-02-27T14:26:06.864Z'
          format: date-time
          readOnly: true
          type: string
        id:
          description: ID of a specific `Account`; _UUID as specified by RFC4122_
          example: eea3f9eb-97e9-406d-80fb-471a6540a265
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        key_id:
          description: ID of a specific vault key that will be used to sign the `Account`; required in the absence of a signer; _UUID as specified by RFC4122_
          example: dcb00685-6434-4f4b-b9df-e929bb90d421
          format: uuid
          maxLength: 36
          minLength: 1
          type: string
        network_id:
          description: ID of a specific `Network` to serve as host to a specific `Account`; _UUID as specified by RFC4122_
          example: 819a2b92-e867-49e0-ad07-823562ca4603
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
        nonce:
          description: Random 32-bit integer or incrementing counter which must only be used once to avoid exposing the underlying secret; if not provided, a random 32-bit integer is used
          example: 4512
          format: int32
          readOnly: false
          type: integer
        organization_id:
          description: ID of a specific `Organization` that created a specific `Account`; _UUID as specified by RFC4122_
          example: 35e90d71-6caa-45bb-86f3-39042d525287
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        public_key:
          description: Public key of a specific `Account`
          example: '0x04f4c6bc6d79b727f2034ffaa7958a84d3bf88142a9d81b5baa18dc81f162c97c273f7acf8132a6a5aa9a81dcd3c485d6d17277a993334575d136f18171053792b'
          readOnly: true
          type: string
        user_id:
          description: ID of a specific `User` that created a specific `Account`; _UUID as specified by RFC4122_
          example: 35e90d71-6caa-45bb-86f3-39042d525287
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        vault_id:
          description: ID of a specific `Vault` that houses a specific `Account` key; _UUID as specified by RFC4122_
          example: d8d448a8-19cd-4696-8469-2b9ff76e22eb
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
      required:
        - network_id
      title: Account
      type: object
    AssociateWorkgroupOrganization:
      description: |-
        Associates a specified `Organization` with a specific `Workgroup`. 

        The bearer JWT used for authorization should be scoped to the `Workgroup` in which the `Organization` is to be included. 
      properties:
        organization_id:
          description: ID of a specific `Organization` to be associated with a specific `Workgroup`; _UUID as specified by RFC4122_
          example: 794c9e17-f9ac-4f35-927a-f7481099f929
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
      required:
        - organization_id
      title: Associate Workgroup Organization
      type: object
    BaselineContext:
      description: A `Workflow` context consisting of a set of stepwise `BaselineRecord` instances
      example:
        baseline_id: a24dd3cc-9822-4a6c-8216-822b9effb0db
        baselineRecord_id:
          - f30c92a1-f6ec-4be9-bb0f-480dda5ad519
        type: Purchase order
        workflow:
          $ref: '#/components/schemas/Workflow'
        workflow_id: 55f560ff-9fbe-4bf3-8b04-5b6317943845
      properties:
        baseline_id:
          description: ID of a specific Baseline instance; _UUID as specified by RFC4122_
          example: ed509f33-cbe4-4e3d-86ff-e508e6496f85
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
        baselineRecord_id:
          description: 'List of IDs containing the specific `BaselineRecord` instances associated with the specific `BaselineContext`'
          example:
          items:
            $ref: '#/components/schemas/BaselineRecord'
          readOnly: false
          type: array
        type:
          description: 'Type of `BaselineContext`'
          example: Purchase order
          readOnly: false
          type: string
        workflow:
          $ref: '#/components/schemas/Workflow'
        workflow_id:
          description: 'ID of a specific `Workflow` for which the context is intended; _UUID as specified by RFC4122_'
          example: '538e8eeb-4772-4685-a283-15d4060762e4'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
      required:
        - baseline_id
          baselineRecord_id
          type
          workflow
          workflow_id
      title: Baseline Context
      type: object
    BaselineRecord:
      description: 'The link between an object or document in an internal system of record and a `BaselineContext`'
      example:
        baseline_context:
          $ref: '#/components/schemas/BaselineContext'
        baseline_id: 'a24dd3cc-9822-4a6c-8216-822b9effb0db'
        id: '24ac3268-9778-419e-9bb5-e4e382cd1ad4'
        type: baseline
      properties:
        baseline_id:
          description: ID used to map a specific record to a specific `BaselineContext`; _UUID as specific by RFC4122_
          example: f30c92a1-f6ec-4be9-bb0f-480dda5ad519
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
        context:
          $ref: '#/components/schemas/BaselineContext'
        id:
          description: 'ID of a specific `BaselineRecord`; _UUID as specified by RFC4122_'
          example: 'bc16c008-1270-470b-8fdb-a9c7c75785fa'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        type:
          description: 'Type of `BaselineRecord`'
          example: Baseline
          readOnly: false
          type: string
      title: Baseline Record
      type: object
    BPIAccount:
      description: 'Associates authorized participants with an account-based state '
      example: []
      properties:
        authorization_condition:
          description: 'Condition necessary for authorization'
          readOnly: false
          type: object
        policies:
          $ref: '#/components/schemas/Policy'
        nonce:
          description: 'Random 32-bit integer or incrementing counter which must only be used once to avoid exposing the underlying secret; if not provided, a random 32-bit integer is used'
          example: 4512
          format: int32
          readOnly: false
          type: integer
        metadata:
          description: 'Arbitrary metadata'
          readOnly: false
          type: object
        recovery_policy:
          $ref: '#/components/schemas/RecoveryPolicy'
      required:
        - policies
          nonce
          metadata
          recovery_policy
      title: 'BPI Account'
      type: object
    Circuit:
      description: |-
        A type of `Prover` that utilizes zero-knowledge proofs for maintaining consistency. The lifecycle of a zero-knowledge circuit depends largely on the chosen `proving_scheme`. For example, zkSNARK proving schemes (i.e., `groth16`) require a trusted setup whereas more modern schemes (i.e., `plonk`) do not. 
        You must provision a circuit before it can be used to generate and verify proofs. The foregoing holds true regardless of which provider, proving_scheme, curve and circuit identifier you specify (or source, if the raw source code of the circuit is provided instead of an identifier).

        **Lifecycle**
        _________

        |Status|Description   |
        |------|-----------------------|
        |init|default status value for all newly-initialized provers|
        |compiling|prover is currently being compiled|
        |compiled|prover has been successfully compiled|
        |pending_setup|trusted setup will begin asynchronously|
        |running_setup|trusted setup is running asynchronously|
        |deploying_artifacts|on-chain shield/verifier contract artifacts are being deployed|
        |provisioned|prover is ready for use|
      properties:
        created_at:
          description: Date and time of `Circuit` creation
          example: '2021-02-27T14:26:06.864Z'
          format: date-time
          readOnly: true
          type: string
        curve:
          description: Pairing-friendly elliptic curve
          example: BN254
          readOnly: false
          type: string
        description:
          description: User-defined descriptor of the `Circuit`
          example: Circuit example description
          readOnly: false
          type: string
        id:
          description: ID for a specific `Circuit`; _UUID as specified by RFC4122_
          example: ce0319c8-ddc8-4d46-a16c-c506f5dae9a0
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        identifier:
          description: Circuit identifier
          example: Cubic
          readOnly: false
          type: string
        name:
          description: User-defined name of `Circuit`
          example: Circuit example name
          readOnly: false
          type: string
        provider:
          description: Circuit provider
          example: gnark
          readOnly: false
          type: string
        proving_key_id:
          description: ID of a specific `Key` used for proving a specific `Circuit`. _UUID as specified by RFC4122_
          example: f2a9e144-79c1-4379-bee8-006f3401f4df
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
        proving_scheme:
          description: Proving scheme to be used
          example: groth16
          readOnly: false
          type: string
        status:
          description: Status of `Circuit`
          enum:
            - init compiling compiled pending_setup running_setup deploying_artifacts provisioned
          example: compiling
          readOnly: true
          type: string
        store_id:
          description: ID of a specific persistent store instance. _UUID as specified by RFC4122_
          example: f4dc441b-5d51-4087-ac11-a68933283859
          format: uuid
          readOnly: false
          type: string
        vault_id:
          description: ID of a specific host `Vault`. _UUID as specified by RFC4122_
          example: 0ca9331a-d3fb-401c-b00b-5ada557c1056
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
        verifying_key_id:
          description: ID of a specific `Key` used for verifying a specific `Circuit`. _UUID as specified by RFC4122_
          example: 2268935e-c21e-4891-88cc-d877cf496faf
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
      required:
        - name
        - identifier
        - provider
        - proving_scheme
        - curve
      title: Circuit
      type: object
    CompiledArtifact:
      description: Compiled smart contract artifact; implementation-specific, i.e., `solc` output
      example:
        abi:
          anonymous: false
          inputs:
            - indexed: false
              internalType: bytes
              name: message
              type: bytes
          name: Ekho
          type: event
        bytecode: 0x
        contract_name: Ekho
        source: |
          contract Ekho {
              event Ekho(bytes message);
              function broadcast(bytes memory message) public {
                  emit Ekho(message);
              }
          }
      properties:
        abi:
          description: Application binary interface of the `Contract`
          example: |
            abi:
              anonymous: false
              inputs:
              - indexed: false
                internalType: bytes
                name: message
                type: bytes
              name: Ekho
              type: event
          readOnly: true
          type: object
        bytecode:
          description: Compiled `Contract` binary
          example: '0x1'
          readOnly: true
          type: string
        contract_name:
          description: Name of `Contract` associated with the a specific compiled artifact
          example: Ekho
          readOnly: true
          type: string
        metadata:
          description: Compiled `Contract` metadata
          example: []
          readOnly: true
          type: object
        source:
          description: Smart contract source code
          example: |
            contract Ekho {
                event Ekho(bytes message);
                function broadcast(bytes memory message) public {
                    emit Ekho(message);
                }
            }
          readOnly: false
          type: string
      title: Compiled Artifact
      type: object
    Config:
      properties:
        counterparties:
          description: List of `Participants` associated with a Baseline process
          items:
            $ref: '#/components/schemas/Participant'
          type: array
        env:
          description: Environment variable
          example: null
          readOnly: false
          type: string
        errors:
          description: List of any errors to be included in the config
          example: exceeds rate limit
          items:
            type: string
          readOnly: false
          type: array
        network_id:
          description: ID of a specific network for which the `config` is intended; _UUID as specified by RFC4122_
          example: 3d77e7f6-62f6-4bb9-94a5-371f336dde16
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
        organization_address:
          description: Address of the `Organization` for which the `config` is intended
          example: 0x
          readOnly: false
          type: string
        organization_id:
          description: ID of a specific `Organization` associated with the `config`; _UUID as specified by RFC4122_
          example: 834f0f8d-3538-490c-a0ad-3d3c6923c5e3
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
        organization_refresh_token:
          description: Refresh token for a specific `Organization`
          example: bearer <JWT>
          readOnly: false
          type: string
        registry_contract_address:
          description: Address for a specific registry contract in which a specific `Organization` is registered
          example: 1.063736884191561e+48
          readOnly: false
          type: string
      title: Config
      type: object
    Contract:
      example:
        accessed_at: 2021-02-28T00:41:44.506+0000
        address: '0xD3F14c012a8717FF7b5D5AC08C287de58C38D8ba'
        created_at: 2021-02-27T14:26:06.864Z
        id: 84a91108-70db-43c5-9f2f-e1655b9e0b03
        name: Shuttle
        network_id: 07102258-5e49-480e-86af-6d0c3260827d
        params:
          abi:
            anonymous: false
            inputs:
              indexed: false
              internal_type: bytes
              name: message
              type: bytes
            name: Ekho
            type: event
          account_id: df83bcbb-ff5b-4c4c-b1f5-8ca6a61fe460
          bytecode: 0x
          contract_name: Ekho
          outputs: []
          source: 0x
          state_mutability: nonpayable
          type: function
        pubsub_prefix: 57478604c134ef20b94dff84e52c0fd562ddae56cd50431339766819a7523d09
        transaction_id: 4c388cca-f11c-4818-96a0-e8ad0b30553d
        type: registry
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
      properties:
        accessed_at:
          description: Date-time of last authorized access
          example: '2021-02-27T14:26:06.864Z'
          format: date-time
          nullable: true
          readOnly: true
          type: string
        address:
          description: Address of `Contract`
          example: '0x2f90A6D021db21e1B2A077c5a37B3C7E75D15b7e'
          readOnly: true
          type: string
        contract_id:
          description: ID of a specific `Contract`; _UUID as specified by RFC4122_
          example: 7bfe016b-73d8-4d28-ba01-d879c852a17b
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        created_at:
          description: Date-time of `Contract` creation
          example: '2021-04-16T15:05:23.107Z'
          format: date-time
          readOnly: true
          type: string
        id:
          description: ID of a specific `Contract`; _UUID as specified by RFC4122_
          example: d2267891-4626-4b04-9613-3f41e2ab61ca
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        name:
          description: User-defined name of `Contract`
          example: Contract name example
          readOnly: false
          type: string
        network_id:
          description: ID of a specific `Network` on which a specific `Contract` resides; _UUID as specified by RFC4122_
          example: 3d77e7f6-62f6-4bb9-94a5-371f336dde16
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
        organization_id:
          description: ID of `Organization` associated with a specific `Contract`; _UUID as specified by RFC4122_
          example: 96ea3010-d05c-4d75-aa60-577666468ae4
          format: uuid
          maxLength: 36
          minLength: 1
          nullable: true
          readOnly: true
          type: string
        params:
          $ref: '#/components/schemas/ContractParams'
        pubsub_prefix:
          description: Prefix used to filter inbound and outbound messages for the reference `Contract`
          example: 57478604c134ef20b94dff84e52c0fd562ddae56cd50431339766819a7523d09
          nullable: true
          readOnly: false
          type: string
        transaction_id:
          description: ID of the `Transaction` for a specific contract's creation; _UUID as specified by RFC4122_
          example: 6596e78b-98c4-4689-bd25-1eac13171568
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        type:
          description: Type of `Contract`
          example: Registry
          nullable: true
          readOnly: false
          type: string
        workgroup_id:
          description: ID of a specific `Workgroup` associated with a specific `Contract`._UUID as specified by RFC4122_
          example: f59c04e3-3a2f-4e3c-b04b-b6eda05a16ec
          format: uuid
          maxLength: 36
          minLength: 1
          nullable: true
          readOnly: false
          type: string
      title: Contract
      type: object
    ContractParams:
      example:
        abi:
          - anonymous: false
            inputs:
              - indexed: false
                internal_type: bytes
                name: message
                type: bytes
            name: Ekho
            type: event
          - inputs:
              - internal_type: bytes
                name: message
                type: bytes
            name: broadcast
            outputs: []
            state_mutability: nonpayable
            type: function
        account_id: df83bcbb-ff5b-4c4c-b1f5-8ca6a61fe460
        bytecode: 0x
        contract_name: Ekho
        source: |
          contract Ekho {
              event Ekho(bytes message);
              function broadcast(bytes memory message) public {
                  emit Ekho(message);
              }
      properties:
        CompiledArtifact:
          $ref: '#/components/schemas/CompiledArtifact'
        account_id:
          description: ID of the `Account` signing identity to be used for the request; _UUID as specified by RFC4122_
          example: 6bb23e2b-07ed-4562-8afb-73955f8f17c5
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
      title: Contract Params
      type: object
    DerivedKey:
      description: A cryptographic `Key` generated from a password or master key
      example:
        context: channel-6852386c-8a3d-41c6-aa0e-766a31a8faaf
        description: this is a secure channel
        name: private chat
        nonce: 4512
      properties:
        context:
          description: Machine-readable string describing the key derivation context
          example: null
          readOnly: false
          type: string
        description:
          description: User-defined description of derived `Key`
          example: Example description for example name
          readOnly: false
          type: string
        name:
          description: User-defined name of derived `Key`
          example: Example name
          readOnly: false
          type: string
        nonce:
          description: Random 32-bit integer or incrementing counter which must only be used once to avoid exposing the underlying secret; if not provided, a random 32-bit integer is used
          example: 4512
          format: int32
          readOnly: false
          type: integer
      required:
        - context
        - description
        - name
      title: Derived key
      type: object
    Error:
      example:
        code: 400
        message: The request was successful
      properties:
        code:
          description: Number corresponding to a specific error
          example: 404
          readOnly: true
          type: integer
        message:
          description: A human-readable description of an error
          example: The request was successful
          readOnly: true
          type: string
      required:
        - code
        - message
      title: Error
      type: object
    ExecuteContract:
      description: Executes a specific `Contract`
      example:
        account_id: 30ff7e74-b870-449e-b41d-e508487f7faf
        method: broadcast
        params:
          - example parameter
        value: 0
      properties:
        account_id:
          description: ID of the `Account` signing identity to be used for the request; _UUID as specified by RFC4122_
          example: 6bb23e2b-07ed-4562-8afb-73955f8f17c5
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        method:
          description: A specific function or procedure to be executed in the target `Contract`
          example: broadcast
          readOnly: false
          type: string
        params:
          description: Array of arguments to be encoded and provided to the `method` invocation
          example: 
            items:
              - example parameter
          items:
            type: string
          readOnly: false
          type: array
        value:
          description: Value of the payment to be included with the transaction, in a specific network's native currency
          example: 0.125
          format: int32
          readOnly: false
          type: integer
      required:
        - account_id
        - method
        - params
        - value
      title: Execute Contract
      type: object
    Key:
      description: A string of data that is used to lock or unlock cryptographic functions
      example:
        created_at: '2021-04-17T21:07:16.098Z'
        description: Secure channel for messaging
        id: 02e81595-ef57-4e71-8e27-1c8b2dfdefbf
        name: Private chat
        spec: ChaCha20
        type: symmetric
        usage: encrypt/decrypt
        vault_id: ae3c07d9-8a41-4cd3-92c0-e6358cbd516c
      properties:
        description:
          description: User-defined description of `Key` to be generated
          example: Example description
          readOnly: false
          type: string
        id:
          description: ID of a specific `Key`. _UUID as specified by RFC4122_
          example: 6bb23e2b-07ed-4562-8afb-73955f8f17c5
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        name:
          description: User-defined name of `Key` to be generated
          example: Example name
          readOnly: false
          type: string
        public_key:
          description: The public key for a specific `Key`
          readOnly: true
          type: string
        spec:
          description: Specification to be used for `Key` creation
          example: BIP39
          readOnly: false
          type: string
        type:
          description: Type of `Key` being created
          enum:
            - asymmetric
            - symmetric
          example: symmetric
          readOnly: false
          type: string
        usage:
          description: Purpose for `Key` being created
          enum:
            - encrypt/decrypt
            - sign/verify
          example: encrypt/decrypt
          readOnly: false
          type: string
        vault_id:
          description: ID of a specific `Vault` in which a specific `Key` is stored. _UUID as specified by RFC4122_
          example: acb91fd4-b377-4732-9c5c-220c2305e665
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
      readOnly: true
      required:
        - name
        - spec
      title: Key
      type: object
    LastBlockHeader:
      example:
        difficulty: '0x6fc715c5'
        extraData: '0xd883010a01846765746886676f312e31368777696e646f7773'
        gasLimit: '0x7a1200'
        gasUsed: '0x12710a'
        hash: '0x252583967a2371984a30a647a8568bd50d8330e72ff33891d69ebb079aeb2ba1'
        logsBloom: >-
          0x00200000010000000000000480020000020000000000000000814020000000000000000000000000000000000000000000008000000200000000000000010000080010000000000000000008004000a00000010000000000000000000000000000000010020000100080400000020800000000020000001000000010040000000200000000000000304008000000000000001000000000081102004000012040100000000001000008020000000000080000000001080020000000018000020000000002000000000000000000000000041000200082001004000002000020000c00000000900000000000000000000000800000020080000080000000000000
        miner: '0x77d1ca4b0cd084e5a421e5d26b96b9a49fa752c2'
        mixHash: '0x75c043be1d1dbb6dc568065c4048a65b763f186348b5c5d2d0a84880f6747edc'
        nonce: '0x4fe1d5c3202230a8'
        number: '0x9e1fd7'
        parentHash: '0x279dbc9f7b7efe981ac58329bbca1864b39723df8aa362796a7a9bd5893ab1aa'
        receiptsRoot: '0x7f874242eaa2e4c5b478f9e8b6abdd95cb10b939ad0fe000e8dc4807efacc4e6'
        sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
        stateRoot: '0x76f111ed19e015cc7ce8d9a5e4f387365390adc5fcc97228705643e907eb793a'
        timestamp: '2021-04-16T15:05:23.130Z'
        transactionsRoot: '0xed041ced1958b58c1040e1e09c456dcc551298eae8d7edca2659f6695a873f'
      properties:
        difficulty:
          description: The proof-of-work algorithm difficulty target for this block
          example: '0x6fc715c5'
          readOnly: true
          type: string
        extra_data:
          description: Arbitrary data neccesary for a specific network to function
          example: '0xd883010a01846765746886676f312e31368777696e646f7773'
          type: string
        gas_limit:
          description: Gas limit for the specified block
          example: 312
          type: integer
        gas_used:
          description: Value of gas used in block
          example: 4412
          type: integer
        hash:
          description: Hash in block header
          example: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
          type: string
        logs_bloom:
          type: string
        miner:
          description: Address of miner that completed the last block
          example: '0x1f4a6f3bfdea8fe1539ad538421cba0668bf8edf'
          type: string
        mix_hash:
          description: Proof of sufficient computation on the block
          example: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
          type: string
        nonce:
          description: Pseudo-random number that authentication protocols attach to communications
          example: '0x28fd8f84deabdafc'
          type: string
        number:
          description: Block number
          example: 90210
          type: integer
        parent_hash:
          description: Hash of the previous block
          example: '0xc641b8031366b7e3a6cdcd4a674e2b40d76abe9ca581c108f851f16a5e331271'
          readOnly: true
          type: string
        receipts_root:
          description: Hash of the root node of the transaction trie
          example: '0x78ce77b839224d44e0a98f64b943fbe4ffd49e467edb741e8819bf19caacba6d'
          readOnly: true
          type: string
        sha3_uncles:
          description: SHA3 of the uncles data in the block
          example: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
          readOnly: true
          type: string
        state_root:
          description: Root hash of state merkle tree
          example: '0xce5a1bc5be36de30c06eb0245924f2183d0cd27461c36325d53ad9e7c9291b43'
          readOnly: true
          type: string
        timestamp:
          description: Date and time of last block
          example: '2021-04-16T15:05:23.130Z'
          readOnly: true
          type: string
        transactions_root:
          description: Root hash of merkle tree containing all transactions
          example: '0xa74e9ef5f851719122e8d019bdf904b6c9795f953cec28cfea54d7aafa66c50a'
          readOnly: true
          type: string
      title: Last Block Header
      type: object
    LogMessage:
      description: Format to receive system of record log messages in the proxy
      properties:
        baseline_id:
          format: uuid
          maxLength: 36
          minLength: 1
          type: string
        message:
          type: string
        object_id:
          format: uuid
          maxLength: 36
          minLength: 1
          type: string
        severity:
          type: string
        timestamp:
          readOnly: true
          type: string
        type:
          type: string
      title: Log Message
      type: object
    Message:
      description: Proxy-internal wrapper for protocol message handling
      properties:
        baseline_id:
          type: string
        errors:
          type: string
        id:
          format: uuid
          maxLength: 36
          minLength: 1
          type: string
        message_id:
          type: string
        payload:
          type: string
        protocol_message:
          type: string
        recipients:
          type: string
        type:
          type: string
      title: Message
      type: object
    Network:
      example:
        chain_id: 8aaf1468-9cc1-4735-8975-aa3909178482
        config:
          block_explorer_url: https://etherscan.io
          chainspec_url: https://gist.githubusercontent.com/kthomas/3ac2e29ee1b2fb22d501ae7b52884c24/raw/161c6a9de91db7044fb93852aed7b0fa0e78e55f/mainnet.chainspec.json
          engine_id: ethash
          is_ethereum_network: true
          json_rpc_url: https://mainnet.infura.io/v3/fde5e81d5d3141a093def423db3eeb33
          native_currency: ETH
          network_id: 324cf211-6d67-4cae-b26c-c424308eabfa
          platform: evm
          protocol_id: pow
          security:
            egress: '*'
            ingress:
              0.0.0.0/0:
                tcp:
                  - 8050
                  - 8051
                  - 30300
                udp:
                  - 30300
          websocket_url: wss://mainnet.infura.io/ws/v3/egt7a93h1s2118n779lpp193dc2fwb69
        created_at: '2018-01-13T22:00:47.947907Z'
        description: Ethereum mainnet
        enabled: true
        id: deca2436-21ba-4ff5-b225-ad1b0b2f5c59
        name: Ethereum mainnet
      properties:
        chain_id:
          description: Chain id of the network
          example: 1
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
        config: {}
        created_at:
          description: Date and time of `Network` creation
          readOnly: true
          type: string
        description:
          description: User-defined descriptor of the `Network`
          nullable: true
          readOnly: false
          type: string
        enabled:
          description: When true, `Network` is available for use to all provisioned to do so.
          type: boolean
        id:
          description: ID of a specific `Network`; _UUID as specified by RFC4122_
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        is_production:
          description: Denotes that `Network` is stable and ready for use in production environment
          type: boolean
        name:
          description: User-defined name of a specific `Network`
          readOnly: false
          type: string
        workgroup_id:
          description: ID of a specific `Workgroup` that created a specific `Network`; _UUID as specified by RFC4122_
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
      required:
        - config
        - name
      title: Network
      type: object
    NetworkStatus:
      example:
        block: 10051293
        chain_id: '3'
        last_block_at: 1618585516000
        meta:
          average_blocktime: 0x
          blocktimes:
            - '55'
            - '24'
            - '8'
            - '1'
            - '3'
            - '20'
            - '7'
          last_block_hash: 698465416514684984piouhygiuytfruytdcghbkjhbvjyhdc
          last_block_header:
            $ref: '#/components/schemas/LastBlockHeader'
      properties:
        block:
          description: Batches of transactions with a hash of the previous block in the chain
          format: int32
          type: integer
        chain_id:
          description: Chain id of the network
          example: 1
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
        last_block_at:
          format: int64
          type: integer
        meta:
          properties:
            average_blocktime:
              type: string
            blocktimes:
              items:
                type: string
              type: array
            last_block_hash:
              type: string
            last_block_header:
              $ref: '#/components/schemas/LastBlockHeader'
          readOnly: true
          type: object
      title: Network Status
    Object:
      description: Wrapper for baseline message (payload) that includes payload context.
      example:
        baseline_id: af96a1bb-0c6d-4b6d-9b18-801d1db07a9d
        id: 27194de0-dbf5-4b93-8b51-b29bb28999cc
        opcode: BLINE
        payload:
          proof: 8d8f7498db7aee910428c737d8427ac4add98353f981ca70db07697a091d8c23972b55b0b20fc0eebc1ac6c2ae427d783291c7fcb2e3f7417d279fea78ce1eac2d2293e53579abbef4960a1e290bd023e2999d8ff423d01080d449ce5d14ca89c94e277e8e0bb14fb91a0b71129920ae4411e77685287611f4d2aaf66b8fc5dc
          type: general_consistency
          witness: {}
        type: general_consistency
      properties:
        baseline_id:
          description: ID used to map the record to the `BaselineContext`; _UUID as specified by RFC4122_
          format: uuid
          type: string
        claim:
          $ref: '#/components/schemas/StateClaim'
        id:
          description: ID of a specific `Object`; _UUID as specified by RFC4122_
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        opcode:
          description: Specifies the operation to be performed
          enum:
            - BLINE
            - JOIN
            - SYNC
          type: string
        payload:
          description: 'Arbitrary data object that holds the intended message'
          example: {}
          properties:
            proof:
              description: 'The hex-encoded proof to verify'
              readOnly: false
              type: string
            type:
              description: 'Type of `Object` being created'
              readOnly: false
              type: string
            witness:
              $ref: '#/components/schemas/Witness'
          type: object
        payload_url:
          description: 'The URL of the payload on a Content Delivery Network (CDN)'
          type: string
        type:
          description: Type of `Object`
          type: string
      title: Object
      type: object
    Organization:
      example:
        created_at: '2021-04-16T15:05:23.130Z'
        description: 'Organization for testing'
        id: 'a7e165dd-2d91-4f1e-b025-6ef2c5514603'
        metadata: {}
        name: 'ACME Inc.'
        user_id: 'ce69ea1c-7f0a-418b-9ecf-28ce7eca09e8'
      properties:
        created_at:
          description: 'Timestamp indicating date and time of `Organization` creation'
          example: '2021-04-16T15:05:23.130Z'
          format: Date-time
          readOnly: true
          type: string
        description:
          description: 'User-defined description of `Organization` being created'
          example: Organization for testing
          readOnly: false
          type: string
        id:
          description: 'ID of a specific `Organization`; _UUID as specified by RFC4122_'
          example: 'a7e165dd-2d91-4f1e-b025-6ef2c5514603'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        metadata:
          nullable: true
          type: object
        name:
          description: 'Name of `Organization` being created'
          example: 'ACME Inc.'
          readOnly: false
          type: string
        user_id:
          description: 'ID of `User` that created a specific `Organization`; _UUID as specified by RFC4122_'
          example: 'ce69ea1c-7f0a-418b-9ecf-28ce7eca09e8'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
      required:
        - description
        - name
      title: 'Organization'
      type: object
    Participant:
      description: 'Party to a Baseline `Workgroup` or `Workflow` context'
      example:
        address: '0x1f4a6f3bfdea8fe1539ad538421cba0668bf8edf'
        api_endpoint: 'https://api_endpoint/api/v1/endpoint'
        messaging_endpoint: 'https://api_endpoint/api/v1/messaging'
        metadata: {}
      properties:
        address:
          description: '`Wallet` address of associated `Organization`'
          example: '0x2f90A6D021db21e1B2A077c5a37B3C7E75D15b7e'
          type: string
        api_endpoint:
          description: 'URL of the baseline API, which may not be exposed to the WAN'
          example: 'https://api_endpoint/api/v1/endpoint'
          type: string
        messaging_endpoint:
          description: 'Publicly-accessible TCP endpoint where the `Participant` receives inbound protocol messages'
          example: 'https://api_endpoint/api/v1/messaging'
          type: string
        metadata:
          description: 'Arbitrary data as needed for external interfaces'
          type: object
      title: 'Participant'
      type: object
    Policy:
      description: 'Ruleset that defines authorization privleges'
      properties:
        metadata:
          type: object
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        scope:
          description: 'Space-delimited list of scopes'
          example: 'email profile bpi'
          readOnly: false
          type: string
      title: Policy
      type: object
    ProtocolMessage:
      description: 'Baseline protocol message internal to BPI'
      properties:
        baseline_id:
          description: 'ID of associated baseline instance; _UUID as specified by RFC4122_'
          format: uuid
          readOnly: false
          type: string
        identifer:
          format: uuid
          readOnly: true
          type: string
        opcode:
          enum:
            - BLINE
            - JOIN
            - SYNC
          type: string
        payload:
          $ref: '#/components/schemas/ProtocolMessagePayload'
        recipient:
          type: string
        sender:
          type: string
        shield:
          type: string
        signature:
          type: string
        type:
          type: string
      title: 'Protocol Message'
      type: object
    ProtocolMessagePayload:
      description: 'Baseline protocol message payload'
      example: 
        object: {}
        proof: |-
          cd50a3d7436610d3ba8e60d7e1be147a
          65f915326c4debed565fa9f58eac399b
          36871252fec8852f579ab24bb7e8f35e
          6e9b14d69ba7c2fa893c4c890d2d68ff
          fad6ac9a54e291b24b9d86d590d096df
        type: 'proof'
        witness: {}
          
      properties:
        object:
          $ref: '#/components/schemas/Object'
        proof:
          description: 'The hex-encoded proof to verify'
          example: |- 
            cd50a3d7436610d3ba8e60d7e1be147a
            65f915326c4debed565fa9f58eac399b
            36871252fec8852f579ab24bb7e8f35e
            6e9b14d69ba7c2fa893c4c890d2d68ff
            fad6ac9a54e291b24b9d86d590d096df'
          type: string
        type:
          description: 'Type of protocol message payload'
          example: 'proof'
          type: string
        witness:
          $ref: '#/components/schemas/Witness'
      title: 'Protocol Message Payload'
    Prover:
      description: |-
        A state synchronization and consistency mechanism for completing on- and off-chain state transitions.
          
        **Lifecycle**
        _________

        |Status|Description   |
        |------|-----------------------|
        |init|default status value for all newly-initialized provers|
        |compiling|prover is currently being compiled|
        |compiled|prover has been successfully compiled|
        |pending_setup|trusted setup will begin asynchronously|
        |running_setup|trusted setup is running asynchronously|
        |deploying_artifacts|on-chain shield/verifier contract artifacts are being deployed|
        |provisioned|prover is ready for use|
      example:
        created_at: '2021-02-27T14:26:06.864Z'
        description: 'Example circuit-type prover'
        id: '584877fd-6a18-4950-9917-1dd0da26e249'
        identifier: 'cubic'
        store_id: 'f39a4b7a-2e4f-496b-a4f1-8a9635da10e7'
        type: 'circuit'
      properties:
        created_at:
          description: 'Date and time of `Prover` creation'
          example: '2021-02-27T14:26:06.864Z'
          format: date-time
          readOnly: true
        description:
          description: 'User-defined description of the `Prover`'
          example: 'Prover example description'
          readOnly: false
          type: string
        id:
          description: 'ID for a specific `Prover`; _UUID as specified by RFC4122_'
          example: 'ce0319c8-ddc8-4d46-a16c-c506f5dae9a0'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        identifier:
          description: 'Prover identifier'
          example: 'Cubic'
          type: string
        name:
          description: 'User-defined name of `Prover`'
          example: 'Prover example name'
          readOnly: false
          type: string
        status:
          description: 'Status of `Prover`'
          enum:
            - init
              compiling
              compiled
              pending_setup
              running_setup
              deploying_artifacts
              provisioned
          type: string
        store_id:
          description: 'ID of the persistent store instance; _UUID as specified by RFC4122_'
          readOnly: false
          type: string
        type:
          description: 'Type of `Prover`'
          example: circuit
          readOnly: false
          type: string
        vault_id:
          description: ID of host `Vault`; _UUID as specified by RFC4122_
          example: 0ca9331a-d3fb-401c-b00b-5ada557c1056
          format: uuid
          readOnly: false
          type: string
      required:
        - name
        - identifier
        - provider
        - proving_scheme
        - curve
        - type
      title: Prover
      type: object
    RecoveryPolicy:
      description: 'Defined policy that outlines the recovery process'
      properties:
        description:
          description: 'User-defined description for a specific recovery policy'
          example: 'Recovery policy that uses a password reset'
          readOnly: false
          type: string
        name:
          description: 'Name for a specific recovery policy'
          example: 'Password recovery policy'
          readOnly: false
          type: string
        policy:
          $ref: '#/components/schemas/Policy'
      required:
        - name
        - policy
      title: 'Recovery Policy'
      type: object
    Role:
      description: 'Defined service entitlements to person entities within the system'
      example:
        description: 'Example role description'
        name: 'Example role name'
        organization_id: 799b1265-e114-4ba3-94bd-a00f072bec7c
        permission: []
        scope: 'email profile bpi'
      properties:
        created_at:
          description: 'Date and time of `Role` creation'
          example: 2021-04-21T02:12:11.158
          format: date-time
          readOnly: true
          type: string
        description:
          description: 'User-defined description of a specific `Role`'
          example: 'Example role description'
          format: uuid
          readOnly: false
          type: string
        organization_id:
          description: 'ID of a specific `Organization` associated with the `Role`. _UUID as specified by RFC4122_'
          example: '799b1265-e114-4ba3-94bd-a00f072bec7c'
          format: uuid
          readOnly: false
          type: string
        name:
          description: 'User-define name of the `Role`'
          example: 'BPI account owner'
          readOnly: false
          type: string
        permission:
          description: 'Abstract object describing specific permissions of the bearer'
          readOnly: false
          type: object
        scope:
          description: 'Space-delimited list of scopes'
          example: 'email profile bpi'
          readOnly: false
          type: string
        user_id:
          description: 'ID of a specific `User` associated with  the specified `Role`'
          example: 2b682899-91fa-458a-9af7-667f16ab8455
          format: uuid
          readOnly: false
          type: string
        vault_id: 
          description: 'ID of `Vault` associated with a specific `Role`'
          example: 1c552c2c-1a12-4e6f-9330-fd8ed0a77d1b
          readOnly: false
          type: string
      required:
        - name
          permission
          scope
          vault_id
      title: Role
      type: object
    Secret:
      example:
        created_at: 2021-04-17T20:35:34.062+0000
        description: 'This secret is being stored for demonstration purposes'
        id: 'e9138dd7-b429-410a-bfa8-2a506d9e4297'
        name: 'Example secret'
        type: 'ed25519'
        value: 0x1
        vault_id: 22e48752-7bff-4daa-89b3-91053bd509f2
      properties:
        created_at:
          description: Date-time of `Secret` creation
          format: date-time
          readOnly: true
          type: string
        description:
          description: User-defined descriptor of specific `Secret`
          readOnly: false
          type: string
        id:
          description: ID of a specific `Secret`; _UUID as specified by RFC4122_
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        name:
          description: User-defined name of `Secret`
          readOnly: false
          type: string
        type:
          description: Type of `Secret`; can be an arbitrary string as of v1.0.0
          readOnly: false
          type: string
        value:
          readOnly: false
          type: string
        vault_id:
          description: ID of `Vault` in which a specific `Secret` is stored; _UUID as specified by RFC4122_
          readOnly: false
          type: string
      required:
        - description
        - name
        - type
        - vault_id
        - value
      title: Secret
      type: object
    State:
      description: The account state of an `Organization`, which must only be changed as a result of a valid transaction (i.e., a successful `Workstep` execution) by way of a `StateClaim`
      properties:
        account_id:
          description: ID of the `Account` signing identity to use for the request; _UUID as specified by RFC4122_
          example: 6bb23e2b-07ed-4562-8afb-73955f8f17c5
          format: uuid
          readOnly: true
          type: string
        address:
          description: Address of the state account; by default this is the anonymous on-chain address of the `Organization`.
          example: '0x391a38d6cca800e28c6b83f3aff4bebb9c0dab00'
          type: string
        epoch:
          description: The period during which the state was valid
          example: '1'
          format: uint64
          type: string
        id:
          description: ID of a specific `State`; _UUID as specified by RFC4122_
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        nonce:
          description: Random 32-bit integer or incrementing counter which must only be used once to avoid exposing the underlying secret; if not provided, a random 32-bit integer is used
          example: 4512
          format: int32
          readOnly: false
          type: integer
        prover_id:
          description: ID of the associated `Prover`; _UUID as specified by RFC4122_
          example: 72f84b01-90ce-432c-91e8-781f21284214
          format: uuid
          readOnly: false
          type: string
        state_claims:
          description: List of `StateClaim` objects required to verify the `State`
          items:
            $ref: '#/components/schemas/StateClaim'
          type: array
      required:
        - id
        - account_id
      title: State
      type: object
    StateClaim:
      description: Representation of a valid state as claimed by a workgroup participant
      properties:
        cardinality:
          description: Root index of a verifiable state
          format: uint256
          type: string
        path:
          description: Path containing the siblings needed to reconstruct the root at `cardinality`
          type: string
        root:
          description: merkle root of the claimed `State`
          type: string
        values:
          description: List of hashed proofs corresponding to the values at `cardinality` and each sibling `path`.
          items:
            type: string
          type: array
      title: State Claim
      type: object
    Store:
      description: 'Abstract storage provider to house `State`'
      example:
        description: 'dmt encrypted note store'
        curve: BN254
        name: Encrypted note store
        provider: dmt
      properties:
        description:
          description: 'User-defined description of the `Store`'
          example: 'Note store encrypted via BN254 '
          readOnly: false
          type: string
        curve:
          description: Pairing-friendly elliptic curve
          example: BN254
          readOnly: false
          type: string
        id:
          description: 'ID of a specific `Store`; _UUID as specified by RFC4122_'
          example: '6e1e289f-5355-46ef-834f-93d3ddac0430'
          format: uuid
          readOnly: true
          type: string
        name:
          description: 'User-defined name of the `Store`'
          example: 'Encrypted note store'
          readOnly: false
          type: string
        provider:
          description: 'Store provider'
          example: 'dmt'
          readOnly: false
          type: string
      required:
        - curve
          name
          provider
      title: Store    
      type: object
    Transaction:
      description: Record of exchange of data between two entities
      example:
        block: 10079406
        block_timestamp: '2021-04-21T02:12:05.000Z'
        created_at: '2021-04-21T02:12:11.158Z'
        finalized_at: '2021-04-21T02:12:14.277Z'
        hash: '84f8525882f3bb24cd2d3cbdf0264115e03932b927f928f9e70b72bf90dd54f1'
        hd_derivation_path: m/44'/60'/0'/0/0
        id: '99a61ee5-73ea-46d1-a434-b6a2a908bc51'
        network_id: '66d44f30-9092-4182-a3c4-bc02736d6ae5'
        status: 'success'
        to: '7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c'
        user_id: '7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c'
        value: 0
        wallet_id: '0fda2f96-d957-4f65-9e92-fa5092c51751'
      properties:
        account_id:
          description: 'ID of the `Account` signing identity to use for the request; _UUID as specified by RFC4122_'
          example: '6bb23e2b-07ed-4562-8afb-73955f8f17c5'
          format: uuid
          readOnly: true
          type: string
        block:
          description: 'Block height for a specific `Transaction`'
          example: '5464'
          format: integer
          readOnly: true
          type: number
        block_timestamp:
          description: 'Date and time of block creation for a specific `Transaction`'
          example: '2021-04-21T02:12:11.158Z'
          readOnly: true
          type: string
        broadcast_at:
          description: 'Date and time that the `Transaction` was broadcast to the intended `Network`'
          example: '2021-04-21T02:12:11.158Z'
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: 'Date and time for the creation of a specific `Transaction`'
          example: '2021-04-21T02:12:11.158Z'
          format: date-time
          readOnly: true
          type: string
        data:
          description: 'Transaction data'
          nullable: true
          type: object
        description:
          description: 'A user-defined summary of the transaction'
          nullable: true
          type: object
        e2e_latency:
          description: 'Amount of time, in milliseconds, of the full transaction lifecycle'
          readOnly: true
          type: integer
        finalized_at:
          description: 'Date and time that a specific `Transaction` was finalized on the intended `Network`'
          example: '2021-04-21T02:12:11.158Z'
          format: date-time
          readOnly: true
          type: string
        hash:
          description: 'A unique string of characters that is specific to every transaction on a specific `Network`; also referred to as transaction ID'
          readOnly: true
          type: string
        hd_derivation_path:
          type: string
        id:
          description: 'ID for a specific `Transaction`; _UUID as specified by RFC4122_'
          example: 'bb0e8038-8e72-46db-a08d-204f804a24c1'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        key_id:
          description: 'ID of the vault key which will be used to sign the `Transaction`; required in the absence of a signer; _UUID as specified by RFC4122_'
          example: 'dcb00685-6434-4f4b-b9df-e929bb90d421'
          format: uuid
          type: string
        network_id:
          description: 'ID of a specific `Network` on which the `Transaction` will be broadcast; _UUID as specified by RFC4122_'
          example: 'bddbc2ac-8531-4f19-962c-f19d93b68fbb'
          format: uuid
          readOnly: false
          type: string
        network_latency:
          description: 'Amount of time, in milliseconds, the transaction was pending inclusion in a block '
          readOnly: true
          type: integer
        published_at:
          description: 'Date and time that a specific `Transaction` was published to the intended `Network`'
          example: '2021-04-21T02:12:11.158Z'
          format: date-time
          readOnly: true
          type: string
        queue_latency:
          description: 'Amount of time, in milliseconds, the transaction was queued for async processing'
          readOnly: true
          type: integer
        ref:
          description: 'Alternate identifier by which this `Transaction` is indexed; `ref` exists to optimize client-side throughput and parallel processing/nonce management _UUID as specified by RFC4122_'
          format: uuid
          nullable: true
          type: string
        status:
          description: 'Current status of a specific transaction'
          readOnly: true
          type: string
        to:
          description: 'Public network address of the recipient of the `Transaction`; if applicable'
          example: '0x1f4a6f3bfdea8fe1539ad538421cba0668bf8edf'
          type: string
        user_id:
          description: 'ID for a specific `User` that created a specific `Transaction`; _UUID as specified by RFC4122_'
          example: '52fe9407-5115-43ce-9115-5fcbcd0457f1'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        value:
          description: 'Total amount of value, represented in the smallest standard denomination of native currency for a specific Network (i.e., wei), to be transferred by the sender to the recipient'
          type: number
        wallet_id:
          description: 'ID of a specific `Wallet` used for signing a specific `Transaction`; _UUID as specified by RFC4122_'
          example: '9c193c18-db84-4506-8462-9e604d1620b9'
          format: uuid
          readOnly: false
          type: string
      title: 'Transaction'
    UnsealVault:
      description: 'Unseals a specified `Vault`'
      example:
        key: 'quantum mirror summer general keep west promote satisfy limit butter mother oyster lazy whip earn spot ticket protect mean play script peace parent intact'
      properties:
        key:
          description: 'Private key required for unsealing a specific `Vault`'
          type: string
      required:
        - key
      title: 'Unseal Vault'
      type: object
    User:
      description: 'An individual participant in the baseline process. Can be virtual or non-virtual. A virtual user acts as a placeholder account that grants access to a specified `Organization` or `Workgroup`. '
      example:
        created_at: '2021-01-27T03:19:33.349Z'
        email: 'joeuser@baseline.local'
        first_name: 'Joe'
        id: '7r19e831-43fd-237e-8b43-12af828ba3e3'
        last_name: 'User'
        name: 'Joe User'
        permissions: 415
        privacy_policy_agreed_at: '2021-01-27T03:19:33.349Z'
        terms_of_service_agreed_at: '2021-01-27T03:19:33.349Z'
      properties:
        created_at:
          description: 'Date and time of `User` creation'
          example: '2021-01-27T03:19:33.349Z'
          readOnly: true
          type: string
        email:
          description: 'Email address for a specific `User`'
          example: 'joeusr@baseline.local'
          readOnly: false
          type: string
        first_name:
          description: 'First name of a specific `User`'
          example: 'Joe'
          readOnly: false
          type: string
        id:
          description: 'ID for a specific `User`; _UUID as specified by RFC4122_'
          example: '7r19e831-43fd-237e-8b43-12af828ba3e3'
          readOnly: true
          type: string
        last_name:
          description: 'Last name of a specific `User`'
          example: 'User'
          readOnly: false
          type: string
        name:
          description: 'Full name of a specific `User`'
          example: 'Joe User'
          readOnly: true
          type: string
        password:
          example: 's3cr37'
          format: 'password'
          type: 'string'
          writeOnly: true
        permissions:
          description: 'Authorized privileges for a specific `User`'
          example: 415
          readOnly: true
          type: integer
        privacy_policy_agreed_at:
          description: 'Date and time of acceptance of the privacy policy'
          example: '2021-01-27T03:19:33.349Z'
          readOnly: true
          type: string
        terms_of_service_agreed_at:
          description: 'Date and time of acceptance of the terms of service'
          example: '2021-01-27T03:19:33.349Z'
          readOnly: true
          type: string
      required:
        - email
        - first_name
        - last_name
      title: User
      type: object
    Vault:
      description: 'Provides key management with a focus on providing advanced privacy and messaging capabilities (i.e., zero-knowledge proofs, SNARK-friendly hash functions, double-ratchet algorithm, etc.)'
      example:
        created_at: '2021-08-23T05:40:11.047741Z'
        description: 'Example Vault for testing and documentation purpose'
        id: '02093d35-61fd-42c3-b70e-44f5312f5187'
        name: Example vault
      properties:
        created_at:
          description: 'Date and time of `Vault` creation'
          example: '2021-04-21T02:12:11.158Z'
          format: date-time
          readOnly: true
          type: string
        description:
          description: 'User-defined descriptor for a specific `Vault` instance'
          example: 'Sample vault description'
          readOnly: false
          type: string
        id:
          description: 'ID for a specific `Vault` instance; _UUID as specified by RFC4122_'
          example: 'f1f29322-b8fe-4adf-95ad-af1585e823c5'
          format: uuid
          readOnly: true
          type: string
        name:
          description: 'User-defined name for a specific `Vault` instance'
          example: 'Example vault name'
          readOnly: false
          type: string
      title: Vault
      type: object
    VerifyProof:
      example:
        proof: |- 
          cd50a3d7436610d3ba8e60d7e1be147a
          65f915326c4debed565fa9f58eac399b
          36871252fec8852f579ab24bb7e8f35e
          6e9b14d69ba7c2fa893c4c890d2d68ff
          fad6ac9a54e291b24b9d86d590d096df
        store: true
        witness: {}
      properties:
        proof:
          description: 'The hex-encoded proof to verify'
          example: |-
            cd50a3d7436610d3ba8e60d7e1be147a
            65f915326c4debed565fa9f58eac399b
            36871252fec8852f579ab24bb7e8f35e
            6e9b14d69ba7c2fa893c4c890d2d68ff
            fad6ac9a54e291b24b9d86d590d096df
          readOnly: false
          type: string
        store:
          description: 'When true, the proof hash is written to the configured prover store'
          example: true
          readOnly: false
          type: boolean
        witness:
          $ref: '#/components/schemas/Witness'
      required:
        - proof
        - witness
      title: 'Verify Proof'
      type: object
    Wallet:
      description: 'Hierarchical deterministic (HD) wallet in accordance with BIP44'
      example:
        created_at: '2021-03-30T02:50:17.155Z'
        id: 'bbc1195e-d131-4b2f-b1a8-1b6f34b55d3e'
        key_id: 'db9e6e21-23b0-497d-a02c-8a8813f8bf2d'
        public_key: 'xpub661MyMwAqRbcGdYXwwnwcnrH51AxyF3kkTeEt6iZfNDXsg4MLPgV7bEZ2v4uCx9djAboy6vSv3VbHPc6hf4Do8wb7FpJCuG7aMBwH2QgLJu'
        purpose: 44
        user_id: '7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c'
        vault_id: '190822c9-62f5-4caf-a419-df735a793b2f'
      properties:
        created_at:
          description: Date and time of `Wallet` creation
          example: '2021-01-27T03:19:33.349Z'
          readOnly: true
          type: string
        id:
          description: 'ID for a specific `Wallet`; _UUID as specified by RFC4122_'
          example: '4ee831ae-327f-4a79-bd74-7e9f56ce40fa'
          format: uuid
          readOnly: true
          type: string
        key_id:
          description: 'ID of a specific private key used to sign a specific `Wallet`; _UUID as specified by RFC4122_'
          example: '5c928a43-9897-417a-9851-768e19b3cecd'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        network_id:
          description: 'ID for a specific `Network` for which a specific `Wallet` is intended; _UUID as specified by RFC4122_'
          example: '84a139c0-2e20-476c-91d0-618f7332189e'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
        public_key:
          description: 'Public signing key of a specific `Wallet`'
          example: 'xpub661MyMwAqRbcGdYXwwnwcnrH51AxyF3kkTeEt6iZfNDXsg4MLPgV7bEZ2v4uCx9djAboy6vSv3VbHPc6hf4Do8wb7FpJCuG7aMBwH2QgLJu'
          readOnly: true
          type: string
        purpose:
          description: 'Purpose is a constant set to 44 (or 0x8000002C) following the BIP43 recommendation. It indicates that the subtree of this node is used according to this specification. Hardened derivation is used at this level'
          example: 44
          format: string
          readOnly: false
          type: integer
        user_id:
          description: 'ID for a specific `User` that created a specific `Wallet`; _UUID as specified by RFC4122_'
          example: '8136f2d5-a993-4ec7-88af-45a01e85feaa'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        vault_id:
          description: 'ID for a specific `Vault` in which a specific `Wallet` is stored; _UUID as specified by RFC4122_'
          example: 'aa1b60d4-4f77-438d-8fca-cb514596e6c3'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
      title: 'Wallet'
      type: object
    Witness:
      description: 'Public and private inputs used to generate the `Proof`. Payload can be delivered as a JSON object or chunked and streamed. Example is dependent on `Prover` parameters. '
      example: {}
      properties: {}
      title: Witness
      type: object
    Workflow:
      description: 'Baseline `Workflow` context containing a subset of `Workgroup` participants and series of `Workstep` instances'
      properties:
        id:
          description: 'ID of a specific `Workflow`; _UUID as specified by RFC4122_'
          example: '4f818bf4-ef2a-4d0b-b4e7-1367f8c71a02'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        participants:
          items:
            $ref: '#/components/schemas/Organization'
          type: array
        shield:
          description: 'Address of the shield contract'
          example: '0x1'
          readOnly: false
          type: string
        worksteps:
          description: 'List of specific `Workstep` instances included in a specific `Workflow`'
          items:
            $ref: '#/components/schemas/Workstep'
          type: array
      title: 'Workflow'
      type: object
    Workgroup:
      description: 'A `Workgroup` represents a logical collection of resources provisioned within the baseline containerized microservices architecture. A `Workgroup` is immutably configured upon initialization with support for a primary `Network` (or "mainnet").'
      example:
        config:
          baselined: true
          webhook_secret: '1dfd34519a06420d8a6ed18afdffe932'
        created_at: '2021-05-21T12:36:52.977Z'
        description: 'Workgroup intended for demonstration purposes'
        hidden: false
        id: 'bdf94fc0-63ad-4ee9-ac75-7eb63365d0f6'
        name: 'Example Workgroup'
        network_id: '07102258-5e49-480e-86af-6d0c3260827d'
        type: 'baseline'
        user_id: '7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c'
      properties:
        config:
          $ref: '#/components/schemas/WorkgroupConfig'
        created_at:
          description: 'Date and time of `Workgroup` creation'
          example: '2021-05-21T12:36:52.977Z'
          format: date-time
          minLength: 1
          readOnly: true
          type: string
        description:
          description: 'User-defined `Workgroup` descriptor'
          example: 'Example workgroup description'
          maxLength: 255
          type: string
        hidden:
          description: 'When true, a specific `Workgroup` is not visible to the public'
          type: boolean
        id:
          description: 'ID for a specific `Workgroup`; _UUID as specified by RFC4122_'
          example: 'bdf94fc0-63ad-4ee9-ac75-7eb63365d0f6'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        name:
          description: 'User-defined name of the `Workgroup`'
          maxLength: 255
          minLength: 1
          type: string
        network_id:
          description: 'ID for a specific `Network` host of a specific `Workgroup`; _UUID as specified by RFC4122_'
          example: '07102258-5e49-480e-86af-6d0c3260827d'
          format: uuid
          maxLength: 36
          minLength: 1
          type: string
        type:
          default: baseline
          description: 'Designates `Workgroup` type. In a Baseline `Workgroup`, will always be `baseline`'
          example: baseline
          minLength: 1
          type: string
        user_id:
          description: 'ID for a specific `User` that created a specific `Workgroup`; _UUID as specified by RFC4122_'
          example: '7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
      required:
        - name
        - type
      title: Workgroup
      type: object
    WorkgroupConfig:
      description: 'Configuration object intended for use by integrated services'
      properties:
        network_id:
          description: 'ID of a specific `Network` for which a specific `Workgroup` is intended; _UUID as specified by RFC4122_'
          example: 'b521e245-6391-4d7a-9e9e-a786157fa0a3'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
        webhook_secret:
          description: 'Secret necessary to access an integrated service webhook'
          minLength: 1
          type: string
      title: Workgroup Config
      type: object
    Workstep:
      description: 'One stepwise state transition in a `Workflow` represented by a `Prover` instance. A `Workstep` may or may not be required to reach on-chain finality prior to the execution of the next `Workstep` in a `Workflow`.'
      example:
        id: 2fffec13-590e-41eb-9a84-69ed881e0036
        participants:
          - $ref: '#/components/schemas/Participant'
        prover_id: 'dd615561-83e6-4f53-ac0f-aaf1749df139'
        require_finality: true
        workflow_id: 'f9227803-5541-4c13-a554-f6980f03362a'
      properties:
        id:
          description: 'ID of a specific `Workstep`; _UUID as specified by RFC4122_'
          example: '2fffec13-590e-41eb-9a84-69ed881e0036'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: true
          type: string
        participants:
          description: 'List of `Organization` entities authorized to participate in a specific `Workstep`'
          items:
            $ref: '#/components/schemas/Participant'
          type: array
        prover_id:
          description: 'ID of the a specific `Prover` instance that is represented in a specific `Workstep`; _UUID as specified by RFC4122_'
          example: 'dd615561-83e6-4f53-ac0f-aaf1749df139'
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
        require_finality:
          default: false
          description: 'When true, the resulting proof from the referenced `Workstep` will be written to the underlying mainnet.'
          example: true
          type: boolean
        state_claims:
          items:
            $ref: '#/components/schemas/StateClaim'
          type: array
        workflow_id:
          description: 'ID of a specific `Workflow` that a specific `Workstep` is part of; _UUID as specified by RFC4122_'
          example: f9227803-5541-4c13-a554-f6980f03362a
          format: uuid
          maxLength: 36
          minLength: 1
          readOnly: false
          type: string
      title: Workstep
      type: object
  securitySchemes:
    OAuth2:
      description: >-
        In accordance with the OAuth 2.0 specification, when an entity (`User`, `Organization`, `Workgroup`) is authorized and the requested `scope` includes `offline_access`, a refresh token is vended and returned on behalf of the caller. This refresh token is long-lived and can be used to authorize short-lived access tokens using the `refresh_token `grant type on subsequent authorization requests. This pattern is useful for machine-to-machine applications; a secure practice is to store the
        long-lived refresh token in a Vault instance (i.e., as a secret), read it into application memory during container initialization and then use it to authorize a short-lived access token. If the container remains running long enough for the access token to expire, the refresh token should once again be used to seamlessly authorize a new access token.
      flows:
        implicit:
          authorizationUrl: https://ident.provide.services/api/v1/oauth/authorize
          scopes:
            email: email and password
            offline_access: access/refresh token authorization model
      type: oauth2
    bearerAuth:
      bearerFormat: JWT
      description: 'The presence of a `bearer` API token is required to authorize most Baseline API calls. A `bearer` API token is an encoded JWT which contains a subject claim (`sub`) which references an authorized entity (i.e., the `User`, `Application` or `Organization`). The authorized entity uses a signed `bearer` authorization Token xto access one or more resources for which the Token was authorized.  Unless otherwise noted, all API requests must include a header such as `Authorization: bearer <jwt>`'
      scheme: bearer
      type: http
externalDocs:
  description: Privacy Policy
  url: https://provide.services/privacy-policy
security:
  - bearerAuth: []
servers:
  - description: Provide Baseline Operator
    url: https://baseline.provide.network
  - description: Local Baseline Integration Stack
    url: http://localhost:8080
  - description: Local BRI-1 Stack
    url: http://localhost:9999