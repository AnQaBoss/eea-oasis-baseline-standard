openapi: '3.0.2'
info:
  title: Baseline API
  description: OASIS standard API specification for the Baseline Protocol
  license:
    name: CC0 1.0 Universal License
    url: 'https://raw.githubusercontent.com/ethereum-oasis/baseline-standard/main/LICENSE'
  version: v1.0.0
servers:
  - url: 'https://baseline.provide.network'
    description: Provide Baseline Operator
  - url: 'http://localhost:8080'
    description: Local Baseline Integration Stack
  - url: 'http://localhost:9999'
    description: Local BRI-1 Stack
security:
  - bearerAuth: []
tags:
  - name: Baseline
    description: Baseline provides internal integration middleware interfaces for baselining systems of record.
  - name: CCSM
    description: Baseline core CCSM API provides interfaces for general interaction with the underlying mainnet.
  - name: Privacy
    description: Baseline core privacy provides interfaces supporting general consistency, zero-knowledge cryptography protocols and secure multi-party computation (MPC).
  - name: Registry
    description: Baseline core registry API provides interfaces for the organization registry.
  - name: Vault
    description: |- 
      Baseline core vault API provides tools and methods for managing digital authentication credentials for `User`, `Organization` and `Workgroup` instances. 
paths:
  /accounts:
    get:
      tags:
        - CCSM
      summary: List accounts
      description: |-
        'Retrieves a list of `Account` instances used for storing cryptocurrency or tokens on behalf of users managing cryptographic material (i.e., for signing transactions). 
      
        An `Account` is an arbitrary keypair capable of storing value on the underlying `Network`.
      operationId: listAccounts
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
      responses:
        '200':
          description: OK
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
    post:
      tags:
        - CCSM
      summary: Create account
      description: |-
        Creates an `Account` (also referred to as a signing identity) capable of storing cryptocurrencies and tokens native to a specific `Network`.  

        An `Account` may be setup as custodial or non-custodial, and may be derived from a `Wallet`. If the `Account` is custodial then the platform will sign and broadcast transactions to the
        network on behalf of an authorized `User` or `Workgroup`.
      operationId: createAccount
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '201':
          description: The request was successful and a new `Account` was created.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
  '/accounts/{id}':
    get:
      tags:
        - CCSM
      summary: Get account details
      description: Returns details for the specified `Account`
      operationId: getAccountDetails
      parameters:
        - name: id
          in: path
          description: ID of the target `Account`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
  /contracts:
    get:
      tags:
        - CCSM
      summary: List contracts
      description: Returns a list of smart contracts visible to an authorized `User`, `Organization` or `Workgroup`
      operationId: listContracts
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
        - name: filter_tokens
          in: query
          description: Flag to indicate if Token contracts should be filtered from the response. Default is true
          required: false
          style: form
          explode: true
          schema:
            type: boolean
        - name: sort
          in: query
          description: 'Indicate how the response should be sorted; currently, recent is the only supported option and returns by accessed_at descending.'
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful.
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contract'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
    post:
      tags:
        - CCSM
      summary: Deploy contract
      description: Deploys a smart contract to the specified `Network`
      operationId: deployContract
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contract'
        required: true
      responses:
        '201':
          description: The request was successful and a new `Contract` was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Contract'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/contracts/{id}':
    get:
      tags:
        - CCSM
      summary: Get contract detail
      description: Returns details for the specified `Contract`. The path parameter {id} can be substituted with the address of the desired `Contract`.
      operationId: getContractDetail
      parameters:
        - name: id
          in: path
          description: ID of target `Contract`.  _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful.
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Contract'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
  '/contracts/{id}/execute':
    post:
      tags:
        - CCSM
      summary: Execute contract
      description: Construct and execute a specific method in a smart contract
      operationId: executeContract
      parameters:
        - name: id
          in: path
          description: ID of contract being executed. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteContract'
            example:
              method: broadcast
              params:
                - hello world
              value: 0
              account_id: 8a1f4492-9a73-4e3d-bafe-6a3794b1320e
        required: true
      responses:
        '202':
          description: |
            The request was successfully accepted and processing will complete
            asynchronously.

            The API returns 202 Accepted if the contract execution will
            broadcast a Transaction to the network and returns a ref, which is
            an identifier you may use to ask for the execution status of the
            Transaction.
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ExecuteContract'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /networks:
    get:
      tags:
        - CCSM
      summary: List networks
      description: Retrives a list of available peer-to-peer `Network` instances and related configuration details
      operationId: listNetworks
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
        - $ref: '#/components/parameters/public'
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Network'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - CCSM
      summary: Create network
      description: |-
        Configuring a new peer-to-peer network can be quite complex. Just how complex depends on the kind of network you intend to provision, and the clients and protocols you plan to support (both now, and in the future). Creating the configuration for a new logical network involves having deep understanding of your goals for the network and the underlying consensus and governance protocols. 
      operationId: createNetwork
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Network'
        required: true
      responses:
        '201':
          description: The request was successful and a new Network was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Network'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/networks/{id}':
    put:
      tags:
        - CCSM
      summary: Update network
      description: Updates a specified `Network`
      operationId: updateNetwork
      parameters:
        - name: id
          in: path
          description: ID of the `Network` to be updated. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Network'
      responses:
        '204':
          description: The request was successful but did not return a response
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/networks/{id}/status':
    get:
      tags:
        - CCSM
      summary: Get network status
      description: 'Retrieve the syncing status and, if fully-synced, real-time network-specific metrics and metadata.'
      operationId: getNetworkStatus
      parameters:
        - name: id
          in: path
          description: ID of the desired `Network`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/NetworkStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
  /organizations:
    get:
      tags:
        - Registry
      summary: List organizations
      description: Retrieves a list of `Organization` instances in the authorized scope
      operationId: listOrganizations
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - Registry
      summary: Create organization
      description: Creates a new `Organization`
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '201':
          description: The request was successful and a new Organization was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/organizations/{id}':
    get:
      tags:
        - Registry
      summary: Get organization details
      description: Retrieves `Organization` details
      operationId: getOrganizationDetails
      parameters:
        - name: id
          in: path
          description: ID of Organization. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    put:
      tags:
        - Registry
      summary: Update organization details
      description: Updates specifed `Organization`
      operationId: updateOrganizationDetails
      parameters:
        - name: id
          in: path
          description: ID of the `Organization` being updated. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '204':
          description: The request was successful but did not return a response
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /transactions:
    get:
      tags:
        - CCSM
      summary: List transactions
      description: Retrieves a list of `Transaction` records scoped to the authorized `User` or `Workgroup`
      operationId: listTransactions
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
        - name: filter_contract_creations
          in: query
          description: 'When true, contract creation transactions are filtered'
          required: false
          style: form
          explode: true
          schema:
            type: boolean
        - name: status
          in: query
          description: Comma-delimited list of statuses by which the transactions response is filtered
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - CCSM
      summary: Create transaction
      description: |
        Creates and broadcast a transaction in a chain- and protocol-agnostic manner.

        This API provides an asynchronous, fault-tolerant mechanism for providing some guarantees about how a well-formed transaction will become eventually-consistent with the underlying target Network. Currently, transactions are guaranteed to be successfully broadcast to the target network or timeout within 5 minutes. If a transaction is unable to be broadcast to the network for any reason (i.e., network reachability, invalid nonce etc.) it is retried every 60 seconds. It is likely these retry and timeout constraints will be made more configurable in a future release.

        In addition to the asynchronous and resilient nature of broadcasting transactions using this API, instrumentation of the full transaction lifecycle is captured for each transaction.
      operationId: createTransaction
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        '201':
          description: The request was successful and a new transaction was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/transactions/{id}':
    get:
      tags:
        - CCSM
      summary: Get transaction details
      description: Returns details for the target `Transaction`
      operationId: getTransactionDetails
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /unseal:
    post:
      tags:
        - Vault
      summary: Unseal vault
      description: |
        Unseals a `Vault` and  enables additional interaction within authorized scope. 

        One sealing key is valid for all vaults within a single instance. The SEAL_UNSEAL_VALIDATION_HASH  environment variable contains a SHA-256 hash of the 256-bit entropy BIP39 seed phrase used for the seal/unseal key. When a valid sealing key is presented to the vault (i.e. one that has the same SHA-256 hash value as the SEAL_UNSEAL_VALIDATION_HASH environment variable), the seal/unseal key will then be cloaked (i.e., encrypted with a random, ephemeral, in-memory cloaking key) in memory and decrypted only when required for operations by the cloaking key.
      operationId: unsealVault
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnsealVault'
        required: true
      responses:
        '204':
          description: The request was successful but did not return a response
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /vaults:
    get:
      tags:
        - Vault
      summary: List vaults
      description: Retrieves a list of Vaults for the authorized context
      operationId: listVaults
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vault'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - Vault
      summary: Create a vault
      description: Create a `Vault` for authorized context
      operationId: createVault
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vault'
        required: true
      responses:
        '201':
          description: The request was successful and a new Vault was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Vault'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/vaults/{id}/keys':
    get:
      tags:
        - Vault
      summary: List keys
      operationId: listkeys
      description: Retrieves a list of Keys in target `Vault`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
        - name: id
          in: path
          description: ID of target `Vault`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Key'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - Vault
      summary: Create a key
      operationId: createKey
      description: Creates a `Key` in the specified `Vault`
      parameters:
        - name: id
          in: path
          description: ID of target `Vault`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
        required: true
      responses:
        '201':
          description: The request was successful and a new Key was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Key'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/vaults/{id}/keys/{key_id}/derive':
    post:
      tags:
        - Vault
      summary: Derive a key
      description: Derives the referenced `Key`
      operationId: deriveaKeyRequest
      parameters:
        - name: id
          in: path
          description: ID of host `Vault`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
        - name: key_id
          in: path
          description: ID of `Key`
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/DeriveKey'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/vaults/{id}/keys/{key_id}':
    delete:
      tags:
        - Vault
      summary: Delete a key
      description: 'Delete target `Key`'
      operationId: deleteKey
      parameters:
        - name: id
          in: path
          description: ID of host `Vault`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
        - name: key_id
          in: path
          description: ID of target `Key`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The request was successful but did not return a response. 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/vaults/{id}/secrets':
    get:
      tags:
        - Vault
      summary: List secrets
      operationId: listSecrets
      description: Returns a list of secrets store in a specified `Vault`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
        - name: id
          in: path
          description: ID of `Vault` containing at least one `Secret`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vault'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - Vault
      summary: Store secret
      operationId: storeSecret
      description: Stores a `Secret` in a specified `Vault`
      parameters:
        - name: id
          description: ID of target `Vault`. _UUID as specified by RFC4122_
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Secret'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/vaults/{id}/secrets/{secret_id}':
    get:
      tags:
        - Vault
      summary: Retrieve secret
      operationId: retrieveSecret
      description: Retrieves a previously created `Secret` from host `Vault`.
      parameters:
        - name: id
          description: ID of host `Vault` containing target `Secret`. _UUID as specified by RFC4122_
          in: path
          required: true
          schema:
            type: string
        - name: secret_id
          description: ID of target `Secret`. _UUID as specified by RFC4122_
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Secret'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    delete:
      tags:
        - Vault
      summary: Delete secret
      operationId: deleteSecret
      description: Delete target `Secret` from host `Vault`
      parameters:
        - name: id
          in: path
          description: ID of `Vault` containing target `Secret`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
        - name: secret_id
          in: path
          description: ID of target `Secret`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The request was successful but did not return a response.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Secret'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /wallets:
    get:
      tags:
        - CCSM
      summary: List wallets
      description: Retrieves a list of `Wallet` instances
      operationId: listWallets
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wallet'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - CCSM
      summary: Create wallet
      description: |
        Creates a `Wallet`. A `Wallet` may be setup as custodial or non-custodial. If the Wallet is custodial then the platform will derive addresses and securely persist an `Account` for each of those derived addresses
      operationId: createWallet
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Wallet'
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/wallets/{id}/accounts':
    get:
      tags:
        - CCSM
      summary: List wallet accounts
      operationId: listWalletAccounts
      description: Retrieves a list of `Account` instances for a target `Wallet`.
      parameters:
        - $ref: '#/components/parameters/results-per-page'
        - name: id
          in: path
          description: ID of `Wallet` containing `Account` records. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /workgroups:
    get:
      tags:
        - Baseline
        - Registry
      summary: List workgroups
      description: Retrieves a list of `Workgroup` instances in the authorized `scope`
      operationId: listWorkgroups
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workgroup'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - Baseline
        - Registry
      summary: Create workgroup
      description: Creates a `Workgroup` with the details provided in the request body
      operationId: createWorkgroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workgroup'
        required: true
      responses:
        '201':
          description: The request was successful and a new Workgroup was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workgroup'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/workgroups/{id}':
      get:
        tags:
        - Baseline
        - Registry
        summary: Get workgroup details
        description: Returns details for the specified `Workgroup`
        operationId: getWorkgroupDetails
        parameters:
          - name: id
            in: path
            description: ID of target `Workgroup`. _UUID as specified by RFC4122_
            required: true
            schema:
              type: string
        responses:
          '200':
            description: The request was successful
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Workgroup'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
          '429':
            $ref: '#/components/responses/TooManyRequests'
          '500':
            $ref: '#/components/responses/InternalServerError'
          '503':
            $ref: '#/components/responses/ServiceUnavailable'
      put:
        tags:
        - Baseline
        - Registry
        summary: Update workgroup
        description: Updates the target `Workgroup`
        operationId: updateWorkgroup
        parameters:
          - name: id
            description: ID of target `Workgroup`. _UUID as specified by RFC4122_
            in: path
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workgroup'
        responses:
          '204':
            description: The request was successful but did not return a response
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
          '429':
            $ref: '#/components/responses/TooManyRequests'
          '500':
            $ref: '#/components/responses/InternalServerError'
          '503':
            $ref: '#/components/responses/ServiceUnavailable'
        deprecated: false
  '/workgroups/{id}/users':
    get:
      tags:
        - Baseline
        - Registry
      summary: List workgroup users
      description: Retrieves a list of `Organization` records associated with a specified `Workgroup`.
      operationId: listWorkgroupUsers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
        - name: id
          in: path
          description: ID of target `Workgroup`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - Baseline
        - Registry
      summary: Associate workgroup Organization
      description: Associates an `Organization` to a specified `Workgroup`
      operationId: associateWorkgroupOrganization
      parameters:
        - name: id
          in: path
          description: ID of target `Workgroup`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateWorkgroupOrganization'
        required: true
      responses:
        '201':
          description: The request was successful and the specified Organization has been associated with the specified Workgroup. 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  /workflows:
    get:
      tags:
        - Baseline
      summary: List workflow instances
      description: Retrieves a list of `Workflow` instances
      operationId: listWorkflows
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - Baseline
      summary: Create `Workflow` instance
      description: Creates a `Workflow` instance
      operationId: createWorkflow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workflow'
      responses:
        '201':
          description: The request was successful and a new Workflow was created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/workflows/{id}':
    get:
      tags:
        - Baseline
      summary: Get workflow details
      description: Returns details for a specified `Workflow`
      operationId: getWorkflowDetails
      parameters:
        - name: id
          in: path
          description: ID of target `Workflow`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/workflows/{id}/worksteps':
    get:
      tags:
        - Baseline
      summary: List workstep instances
      description: Retrieves a list of `Workstep` instances contained within a specified `Workflow` instance
      operationId: listWorksteps
      parameters:
        - name: id
          in: path
          description: ID of host `Workflow`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string   
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workstep'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - Baseline
      summary: Create a `Workstep` instance
      description: Creates a `Workstep` instance
      operationId: createWorkstep
      parameters:
        - name: id
          in: path
          description: ID of host `Workflow`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string   
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workstep'
      responses:
        '201':
          description: The request was successful and a new Workstep was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workstep'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/workflows/{id}/worksteps/{workstep_id}':
    get:
      tags:
        - Baseline
      summary: Get workstep details
      description: Returns details for a specified `Workstep`
      operationId: getWorkstepDetails
      parameters:
        - name: id
          in: path
          description: ID of host `Workflow`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
        - name: workstep_id
          in: path
          description: ID of target `Workstep`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string      
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Workstep'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /objects:
    post:
      tags:
        - Baseline
      summary: Create a Baseline object
      description: Creates a Baseline object.
      operationId: createBaselineObject
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
        required: true
      responses:
        '201':
          description: The request was successful and a new Object was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
      servers:
        - url: 'https://baseline.proxy/api/v1'
  '/objects/{id}':
    put:
      tags:
        - Baseline
      summary: Update Object
      description: Updates a specified `Object`
      operationId: updateObject
      parameters:
        - name: id
          in: path
          description: ID of target `Object`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
        required: true
      responses:
        '204':
          description: The request was successful and the specified Object was updated
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
      servers:
        - url: 'https://baseline.proxy/api/v1'
  /states:
    get:
      tags:
        - Baseline
      summary: List state objects
      description: Retrieves a list of `State` objects
      operationId: listStates
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/results-per-page'
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/State'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      servers:
        - url: 'https://baseline.proxy/api/v1' 
      deprecated: false
  '/states/{id}':
    get:
      tags:
        - Baseline
      summary: Get state details
      description: Returns details for the specified `State`
      operationId: getStateDetails
      parameters:
        - name: id
          in: path
          description: ID of the target `State`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/schemas/State'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      servers:
        - url: 'https://baseline.proxy/api/v1'
      deprecated: false
  /provers:
    get:
      tags:
        - Privacy
      summary: List Provers
      description: |-
        Retrieves a list of `Prover` instances. A `Prover` is a state synchronization and consistency mechanism for completing on- and off-chain state transitions.
        
      operationId: listProvers
      parameters:
        - name: curve
          in: query
          description: Filter the response by elliptic curve
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: identifier
          in: query
          description: Filter the response by identifier
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: provider
          in: query
          description: Filter the response by provider
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: proving_scheme
          in: query
          description: Filter the response by proving scheme
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: status
          in: query
          description: Filter the response by the status
          required: false
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prover'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
    post:
      tags:
        - Privacy
      summary: Create prover
      description: |
        Creates a baseline `Prover`.

        You must provision a prover before it can be used to generate and verify proofs. The foregoing holds true regardless of which provider, proving_scheme, curve and prover identifier you specify (or source, if the raw source code of the `Prover` is provided instead of an identifier).

      operationId: createProver
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prover'
        required: true
      responses:
        '201':
          description: The request was successful and a new `Prover` was created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/prover/{id}':
    get:
      tags:
        - Privacy
      summary: Get prover details
      description: Returns details of a specified `Prover`
      operationId: getProverDetails
      parameters:
        - name: id
          in: path
          description: ID of target `Prover`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
            format: UUID
      responses:
        '200':
          description: The request was successful
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Prover'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/provers/{id}/prove':
    post:
      tags:
        - Privacy
      summary: Prove prover
      description: 'Once you have provisioned a prover, this API can be used to generate a proof given valid witness parameters. Calling this API has an implicit side-effect of writing the hash of generated proof to the persistent store associated with the `Prover`.'
      operationId: proveProver
      parameters:
        - name: id
          in: path
          description: ID of `Prover` requiring proof. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProveRequest'
        required: true
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: 'The API returns a 422 status code and human-readable error message(s) if (i) the witness parameters is not provided, (ii) required prover arguments (i.e., fields) are not included within the given witness parameter or (iii) when Prover constraints are not satisfied.'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/prover/{id}/verify':
    post:
      tags:
        - Privacy
      summary: Verify
      description: Verifies a `Proof` using the given `Witness` parameters
      operationId: verify
      parameters:
        - name: id
          in: path
          description: ID of target `Prover`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyProof'
        required: true
      responses:
        '201':
          description: The request was successful 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
  '/provers/{id}/store/{index}':
    get:
      tags:
        - Privacy
      summary: Retrieve store value
      description: Returns the store value of the specified `Prover`. The store value is a hash of the proof.
      operationId: getStoreValue
      parameters:
        - name: id
          in: path
          description: ID of target `Prover`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
        - name: index
          in: path
          description: The index of the leaf in the Merkle tree for the underlying data structure.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyProof'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      deprecated: false
components:
  schemas:
    Account:
      title: Account
      type: object
      properties:
        id:
          description: ID of the desired `Account`. _UUID as specified by RFC4122_
          type: string
          format: UUID
          readOnly: true
          example: 'eea3f9eb-97e9-406d-80fb-471a6540a265'
        created_at:
          type: string
          description: Timestamp of `Account` creation
          format: date-time
          readOnly: true
          example: '2021-02-27T14:26:06.864Z'
        network_id:
          type: string
          description: ID of host `Network`. _UUID as specified by RFC4122_
          format: UUID
          example: '819a2b92-e867-49e0-ad07-823562ca4603'
        user_id:
          type: string
          description: ID of `User` or `Organization` that created the `Account`. _UUID as specified by RFC4122_
          format: UUID
          readOnly: true
          example: '35e90d71-6caa-45bb-86f3-39042d525287'
        vault_id:
          type: string
          description: ID of the `Vault` that houses `Account` key. _UUID as specified by RFC4122_
          format: UUID
          readOnly: true
          example: 'd8d448a8-19cd-4696-8469-2b9ff76e22eb'
        key_id:
          type: string
          description: ID of the `Key` used to sign the `Account`. _UUID as specified by RFC4122_
          format: UUID
          readOnly: true
          example: '6f261ee8-114f-489c-bd1e-7bb3185ff607'
        public_key:
          type: string
          description: Public key of the `Account`
          readOnly: true
          example: '0x04f4c6bc6d79b727f2034ffaa7958a84d3bf88142a9d81b5baa18dc81f162c97c273f7acf8132a6a5aa9a81dcd3c485d6d17277a993334575d136f18171053792b'
        address:
          type: string
          description: |-
            Address of the `Account`
            
              Implementations should consider how to support an increase from a 20-byte address to a 32-byte address.
              
              The following illustrates the schema of a 32-byte address:

              Byte 0: Version byte (8-bit padding; reserved for future)
              Byte 1-2: Reserved (16-bit reserved)
              Byte 3-5: Epoch (0 <= e <= 16777215)
              Byte 6-31: 26 byte hash
              
              See https://ethereum-magicians.org/t/increasing-address-size-from-20-to-32-bytes/5485
          readOnly: true
          example: '0x4A252b7e30f6cD6a85d20476Bb291Ef7f3a05293'
      example: 
        id: 99c404e9-fe10-4ca7-b787-d5943d03591c
        created_at: '2021-06-15T00:50:40.475580742Z'
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        user_id: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        vault_id: 190822c9-62f5-4caf-a419-df735a793b2f
        key_id: 331156fb-fa5c-4557-ac39-69ae34c72c18
        public_key: >-
          0x04f4c6bc6d79b727f2034ffaa7958a84d3bf88142a9d81b5baa18dc81f162c97c273f7acf8132a6a5aa9a81dcd3c485d6d17277a993334575d136f18171053792b
        address: '0x4A252b7e30f6cD6a85d20476Bb291Ef7f3a05293'
    AssociateWorkgroupOrganization:
      title: Associate Workgroup Organization
      required:
        - user_id
      type: object
      properties:
        user_id:
          type: string
          format: UUID
          description: ID of `Organization` to be associated with `Workgroup`. _UUID as specified by RFC4122_
          example: '794c9e17-f9ac-4f35-927a-f7481099f929'
    BaselineContext:
      title: Baseline Context
      type: object
      description: A `Workflow` context consisting of a set of stepwise `BaselineRecord` instances
      properties:
        baseline_id:
          type: string
          description: ID of the target Baseline instance. _UUID as specified by RFC4122_
          readOnly: false
          example: 'ed509f33-cbe4-4e3d-86ff-e508e6496f85'
        type:
          type: string
          description: Type of `BaselineContext`
          readOnly: false
          example: 'Purchase order'
        workflow_id:
          type: string
          format: UUID
          description: ID of associated `Workflow`. _UUID as specified by RFC4122_ 
          readOnly: false
          example: '538e8eeb-4772-4685-a283-15d4060762e4'
        workflow:
          $ref: '#/components/schemas/Workflow'
      example:
        baseline_id: a24dd3cc-9822-4a6c-8216-822b9effb0db
        type: 0x
        workflow_id: 55f560ff-9fbe-4bf3-8b04-5b6317943845
        workflow: 
          $ref: '#/components/schemas/Workflow' 
    BaselineRecord:
      title: Baseline Record
      type: object
      description: The link between an object or document in an internal system of record and a `BaselineContext`
      properties:
        id:
          type: string
          description: ID of the `BaselineContext`. _UUID as specified by RFC4122_
          readOnly: true
          example: 'bc16c008-1270-470b-8fdb-a9c7c75785fa'
        baseline_id:
          type: string
          description: Globally unique UUID used to map the record to the `BaselineContext` 
          readOnly: false
          example: f30c92a1-f6ec-4be9-bb0f-480dda5ad519
        context:
          $ref: '#/components/schemas/BaselineContext'
        type:
          type: string
          description: Type of `BaselineRecord`
          example: Baseline
      example:
        id: 24ac3268-9778-419e-9bb5-e4e382cd1ad4
        baseline_id: a24dd3cc-9822-4a6c-8216-822b9effb0db
        baseline_context: 
          $ref: '#/components/schemas/BaselineContext'
        type: baseline
    CompiledArtifact:
      title: Compiled Artifact
      type: object
      properties:
        contract_name:
          type: string
        abi:
          type: object
        bytecode:
          type: string
        source:
          type: string
      example:
        contract_name: Ekho
        abi:
          anonymous: false
          inputs:
          - indexed: false
            internal_type: bytes
            name: message
            type: bytes
          name: Ekho
          type: event
        inputs:
          - internal_type: bytes
            name: message
            type: bytes
        name: broadcast
        outputs: []
        state_mutability: nonpayable
        type: function
        bytecode: 0x
        source: |
          contract Ekho {
              event Ekho(bytes message);
              function broadcast(bytes memory message) public {
                  emit Ekho(message);
              }
          }
    Config:
      title: Config
      type: object
      properties:
        counterparties:
          description: List of `Participants` associated with a Baseline process
          type: array
          items: 
            $ref: '#/components/schemas/Participant'
        env:
          type: string
          description: Environment variable
        errors:
          type: array
          items: 
            type: string 
        network_id:
          type: string
          description: ID of the host network. _UUID as specified by RFC4122_
        organization_address:
          type: string
        organization_id:
          type: string
          description: ID of the host `Organization`. _UUID as specified by RFC4122_
        organization_refresh_token:
          type: string
        registry_contract_address:
          type: string
    Contract:
      title: Contract
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: ID of the target `Contract`. _UUID as specified by RFC4122_
          example: 'd2267891-4626-4b04-9613-3f41e2ab61ca'
        created_at:
          type: string
          readOnly: true
          description: Date-time of `Contract` creation
          example: '2021-04-16T15:05:23.107Z'
        workgroup_id:
          type: string
          format: UUID
          readOnly: false
          description: ID of target `Workgroup`._UUID as specified by RFC4122_
          example: 'f59c04e3-3a2f-4e3c-b04b-b6eda05a16ec'
        organization_id:
          type: string
          nullable: true
          readOnly: true
          description: ID of `Organization` associated with reference `Contract`. _UUID as specified by RFC4122_
          example: '96ea3010-d05c-4d75-aa60-577666468ae4'
        network_id:
          type: string
          readOnly: false
          description: ID of target `Network`. _UUID as specified by RFC4122_
          example: '3d77e7f6-62f6-4bb9-94a5-371f336dde16'
        contract_id:
          type: string
          nullable: true
          readOnly: true
          description: ID of the parent `Contract`. _UUID as specified by RFC4122_
          example: '7bfe016b-73d8-4d28-ba01-d879c852a17b'
        transaction_id:
          type: string
          nullable: true
          readOnly: true
          description: ID of the `Transaction`. _UUID as specified by RFC4122_
          example: '6596e78b-98c4-4689-bd25-1eac13171568'
        name:
          type: string
          readOnly: false
          description: User-defined name of `Contract`
          example: 'Contract name example'
        address:
          type: string
          readOnly: true
          description: Address of `Contract`
          example: '0x2f90A6D021db21e1B2A077c5a37B3C7E75D15b7e'
        type:
          type: string
          nullable: true
          readOnly: false
          description: Type of `Contract`
          example: 'Registry'
        accessed_at:
          type: string
          nullable: true
          readOnly: true
          description: Date-time of last authorized access
          example: '2021-02-27T14:26:06.864Z'
        pubsub_prefix:
          type: string
          nullable: true
          description: Prefix used to filter inbound and outbound messages for the reference `Contract`
          readOnly: false
          example: '57478604c134ef20b94dff84e52c0fd562ddae56cd50431339766819a7523d09'
        params:
          $ref: '#/components/schemas/ContractParams'
      example:
        id: 84a91108-70db-43c5-9f2f-e1655b9e0b03
        created_at: '2021-02-27T14:26:06.864Z'
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
        network_id: 07102258-5e49-480e-86af-6d0c3260827d
        transaction_id: 4c388cca-f11c-4818-96a0-e8ad0b30553d
        name: Shuttle
        address: '0xD3F14c012a8717FF7b5D5AC08C287de58C38D8ba'
        type: registry
        accessed_at: '2021-02-28T00:41:44.506+0000'
        pubsub_prefix: 57478604c134ef20b94dff84e52c0fd562ddae56cd50431339766819a7523d09
        params:
          account_id: df83bcbb-ff5b-4c4c-b1f5-8ca6a61fe460
          contract_name: Ekho
          abi:
            anonymous: false
            inputs:
              indexed: false
              internal_type: bytes
              name: message
              type: bytes
            name: Ekho
            type: event
          outputs: []
          state_mutability: nonpayable
          type: function
          bytecode: 0x
          source: 0x
    ContractParams:
      title: Contract Params
      type: object
      properties:
        account_id:
          type: string
          description: ID of target `Account`. _UUID as specified by RFC4122_
          example: 0267e902-913e-426e-bfc1-0670171657e0
        CompiledArtifact:
          $ref: '#/components/schemas/CompiledArtifact'
      example:
        account_id: df83bcbb-ff5b-4c4c-b1f5-8ca6a61fe460
        contract_name: Ekho
        abi:
          - anonymous: false
            inputs:
              - indexed: false
                internal_type: bytes
                name: message
                type: bytes
            name: Ekho
            type: event
          - inputs:
              - internal_type: bytes
                name: message
                type: bytes
            name: broadcast
            outputs: []
            state_mutability: nonpayable
            type: function
        bytecode: 0x
        source: |
          contract Ekho {
              event Ekho(bytes message);
              function broadcast(bytes memory message) public {
                  emit Ekho(message);
              }
          }  
    CreateSealorUnsealKey:
      title: Create Seal/Unseal Key
      required:
        - key
        - validation_hash
      type: object
      properties:
        key:
          type: string
        validation_hash:
          type: string
      example:
        key: quantum leap fast forward keep west promote satisfy limit butter mother oyster lazy whip earn spot ticket protect mean play script peace parent intact
        validation_hash: '698465416514684984987984765465465465454'
    DeployContract:
      title: Deploy Contract
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        workgroup_id:
          type: string
        organization_id:
          type: string
          nullable: true
        network_id:
          type: string
        contract_id:
          type: string
          nullable: true
        transaction_id:
          type: string
          nullable: true
        name:
          type: string
        address:
          type: string
        type:
          type: string
          nullable: true
        params:
          $ref: '#/components/schemas/ContractParams'
        accessed_at:
          type: string
          nullable: true
        pubsub_prefix:
          type: string
      example:
        id: 3956687d-154f-4a86-a6f8-43b39a8bd58e
        created_at: '2021-04-16T15:20:35.143+0000'
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        name: Ekho
        address: '0xD3F14c012a8717FF7b5D5AC08C287de58C38D8ba'
        params:
          account_id: 8a1f4492-9a73-4e3d-bafe-6a3794b1320e
          CompiledArtifact:
            contractName: Ekho
            abi:
              anonymous: false
              inputs:
                name: Ekho
                type: event
            bytecode: 0x
            source: 0x
        pubsub_prefix: 57478604c134ef20b94dff84e52c0fd562ddae56cd50431339766819a7523d09
    DeriveKey:
      title: Derive Key Request
      required:
        - context
        - description
        - name
        - nonce
      type: object
      properties:
        nonce:
          type: integer
          format: int32
        context:
          type: string
        name:
          type: string
          description: Name of derived `Key`
        description:
          type: string
          description: Description of derived `Key`
      example:
        nonce: 4512
        context: channel-6852386c-8a3d-41c6-aa0e-766a31a8faaf
        name: private chat
        description: this is a secure channel
    Error:
      title: Error
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      example:
        code: '500'
        message: The request resulted in an internal error during processing
    ExecuteContract:
      title: Execute Contract
      required:
        - account_id
        - method
        - params
        - value
      type: object
      properties:
        method:
          type: string
        params:
          type: array
          items:
            type: string
        value:
          type: integer
          format: int32
        account_id:
          type: string
          description: ID of the required `Account`. _UUID as specified by RFC4122_
      example:
        method: broadcast
        params:
          - hello world
        value: 0
        account_id: 30ff7e74-b870-449e-b41d-e508487f7faf
    Key:
      title: Key
      required:
        - name
        - spec
      type: object
      readOnly: true
      properties:
        id: 
          type: string
          description: ID of referenced `Key`. _UUID as specifed by RFC4122_
          readOnly: true
        vault_id:
          type: string
          description: ID of `Vault` in which the referenced `Key` resides. _UUID as specifed by RFC4122_
          readOnly: true
        type:
          type: string
          description: Type of `Key` being created
          enum:
            - asymmetric
            - symmetric
          example: 'symmetric'
        usage:
          type: string
          description: Purpose for `Key` being created
          enum:
            - encrypt/decrypt
            - sign/verify
          example: 'encrypt/decrypt'
        spec:
          type: string
          description: Specification to be used for `Key` creation
          example: BIP39
        name:
          type: string
          description: Name of `Key` to be generated
          example: 'Sample name'
        description:
          type: string
          description: Description of `Key` to be generated
          example: 'Sample description'
        public_key:
          type: string
          readOnly: true
      example:
        id: 02e81595-ef57-4e71-8e27-1c8b2dfdefbf
        created_at: '2021-04-17T21:07:16.098Z'
        vault_id: ae3c07d9-8a41-4cd3-92c0-e6358cbd516c
        type: symmetric
        usage: encrypt/decrypt
        spec: ChaCha20
        name: Private chat
        description: Secure channel for messaging
    LastBlockHeader:
      title: Last Block Header
      type: object
      properties:
        difficulty:
          type: string
          example: '0x6fc715c5'
          description: The proof-of-work algorithm difficulty target for this block
        extra_data:
          type: string
          example: '0xd883010a01846765746886676f312e31368777696e646f7773'
        gas_limit:
          type: string
          example: '0x7a1200'
        gas_used:
          type: string
          description: 'Value of gas used in block'
          example: '0x12710a'
        hash:
          type: string
          description: Hash in block header
          example: 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
        logs_bloom:
          type: string
        miner:
          type: string
          description: Address of miner that completed the last block 
          example: '0x1f4a6f3bfdea8fe1539ad538421cba0668bf8edf'
        mix_hash:
          type: string
          example: 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
          description: Proof of sufficient computation on the block
        nonce:
          type: string
          description: Pseudo-random number that authentication protocols attach to communications
          example: '0x28fd8f84deabdafc'
        number:
          type: string
          description: ''
          example: '90210'
        parent_hash:
          type: string
          description: Hash of the previous block
          example: '0xc641b8031366b7e3a6cdcd4a674e2b40d76abe9ca581c108f851f16a5e331271'
        receipts_root:
          type: string
          example: '0x78ce77b839224d44e0a98f64b943fbe4ffd49e467edb741e8819bf19caacba6d'
        sha3_uncles:
          type: string
          example: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
        state_root:
          type: string
          example: '0xce5a1bc5be36de30c06eb0245924f2183d0cd27461c36325d53ad9e7c9291b43'
        timestamp:
          type: string
          description: Date and time
          example: '2021-04-16T15:05:23.130Z'
        transactions_root:
          type: string
          example: '0xa74e9ef5f851719122e8d019bdf904b6c9795f953cec28cfea54d7aafa66c50a'
      example:
        difficulty: '0x6fc715c5'
        extraData: '0xd883010a01846765746886676f312e31368777696e646f7773'
        gasLimit: '0x7a1200'
        gasUsed: '0x12710a'
        hash: '0x252583967a2371984a30a647a8568bd50d8330e72ff33891d69ebb079aeb2ba1'
        logsBloom: '0x00200000010000000000000480020000020000000000000000814020000000000000000000000000000000000000000000008000000200000000000000010000080010000000000000000008004000a00000010000000000000000000000000000000010020000100080400000020800000000020000001000000010040000000200000000000000304008000000000000001000000000081102004000012040100000000001000008020000000000080000000001080020000000018000020000000002000000000000000000000000041000200082001004000002000020000c00000000900000000000000000000000800000020080000080000000000000'
        miner: '0x77d1ca4b0cd084e5a421e5d26b96b9a49fa752c2'
        mixHash: '0x75c043be1d1dbb6dc568065c4048a65b763f186348b5c5d2d0a84880f6747edc'
        nonce: '0x4fe1d5c3202230a8'
        number: '0x9e1fd7'
        parentHash: '0x279dbc9f7b7efe981ac58329bbca1864b39723df8aa362796a7a9bd5893ab1aa'
        receiptsRoot: '0x7f874242eaa2e4c5b478f9e8b6abdd95cb10b939ad0fe000e8dc4807efacc4e6'
        sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
        stateRoot: '0x76f111ed19e015cc7ce8d9a5e4f387365390adc5fcc97228705643e907eb793a'
        timestamp: '2021-04-16T15:05:23.130Z'
        transactionsRoot: '0xed041ced1958b58c1040e1e09c456dcc551298eae8d7edca2659f6695a873f'
    LogMessage:
      title: Log Message
      type: object
      description: Format to receive system of record log messages in the proxy
      properties:
        baseline_id:
          type: string
        message:
          type: string
        object_id:
          type: string
        severity:
          type: string
        timestamp:
          type: string
          readOnly: true
        type:
          type: string
    Message:
      title: Message
      type: object
      description: Proxy-internal wrapper for protocol message handling
      properties:
        baseline_id:
          type: string
        errors:
          type: string
        id:
          type: string
        message_id:
          type: string
        payload:
          type: string
        protocol_message:
          type: string
        recipients:
          type: string
        type:
          type: string
    Network:
      title: Network
      required:
        - config
        - name
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: ID of `Network`. _UUID as specifed by RFC4122_
        created_at:
          type: string
          readOnly: true
          description: Date and time of `Network` creation
        workgroup_id:
          type: string
          readOnly: true
          description: ID of `Workgroup` that created the `Network`. _UUID as specifed by RFC4122_
        name:
          type: string
          readOnly: false
          description: User-defined name of `Network`
        description:
          type: string
          nullable: true
          readOnly: false
          description: User-defined descriptor of the `Network`
        enabled:
          type: boolean
          description: When true, `Network` is available for use to all provisioned to do so. 
        chain_id:
          type: string
          format: UUID
          description: ID of assocated blockchain network. _UUID as specified by RFC4122_
        is_production:
          type: boolean
          description: Denotes that `Network` is stable and ready for use in production environment. 
        config: {}
      example:
        id: deca2436-21ba-4ff5-b225-ad1b0b2f5c59
        created_at: '2018-01-13T22:00:47.947907Z'
        name: Ethereum mainnet
        description: Ethereum mainnet
        enabled: true
        chain_id: '1'
        config:
          block_explorer_url: 'https://etherscan.io'
          chainspec_url: >-
            https://gist.githubusercontent.com/kthomas/3ac2e29ee1b2fb22d501ae7b52884c24/raw/161c6a9de91db7044fb93852aed7b0fa0e78e55f/mainnet.chainspec.json
          engine_id: ethash
          is_ethereum_network: true
          json_rpc_url: 'https://mainnet.infura.io/v3/fde5e81d5d3141a093def423db3eeb33'
          native_currency: ETH
          network_id: 1
          platform: evm
          protocol_id: pow
          security:
            egress: '*'
            ingress:
              0.0.0.0/0:
                tcp:
                  - 8050
                  - 8051
                  - 30300
                udp:
                  - 30300
          websocket_url: 'wss://mainnet.infura.io/ws/v3/egt7a93h1s2118n779lpp193dc2fwb69'
    NetworkStatus:
      title: Network Status
      properties:
        block:
          type: integer
          format: int32
        chain_id:
          type: string
          format: UUID
        last_block_at:
          type: integer
          format: int64
        meta:
          type: object
          readOnly: true
          properties:
            average_blocktime:
              type: string
            blocktimes:
              type: array
              items:
                type: string
            last_block_hash:
              type: string
            last_block_header:
              $ref: '#/components/schemas/LastBlockHeader'
      example:
        block: 10051293
        chain_id: '3'
        last_block_at: 1618585516000
        meta:
          average_blocktime: 0x
          blocktimes:
            - '55'
            - '24'
            - '8'
            - '1'
            - '3'
            - '20'
            - '7'
          last_block_hash: 698465416514684984piouhygiuytfruytdcghbkjhbvjyhdc
          last_block_header:
            $ref: '#/components/schemas/LastBlockHeader'
    Object:
      title: Object
      description: 'Wrapper for baseline message (payload) that includes payload context.'
      type: object
      properties:
        id:
          type: string
          format: UUID
          description: ID of the `Object`. _UUID as specified by RFC4122_
          readOnly: true
        baseline_id: 
          type: string
          format: UUID
          description: Globally unique UUID used to map the record to the `BaselineContext`. _UUID as specified by RFC4122_
        opcode:
          type: string
          description: Specifies the operation to be performed
          enum:
            - BLINE
            - JOIN
            - SYNC
        payload:
          type: object
          description: Arbitrary data object that holds the intended message
          properties:
            proof: 
              type: string
              description: ''
            type:
              type: string
              description: Type of `Object` being created
            witness:
              $ref: '#/components/schemas/Witness'
          example: {}
        payload_url:
          description: The URL of the payload on a Content Delivery Network (CDN)
          type: string
        type:
          type: string
          description: Type of `Object`
        claim: 
          $ref: '#/components/schemas/StateClaim'
      example:
        id: 27194de0-dbf5-4b93-8b51-b29bb28999cc
        baseline_id: af96a1bb-0c6d-4b6d-9b18-801d1db07a9d
        opcode: BLINE
        payload:
          proof: 8d8f7498db7aee910428c737d8427ac4add98353f981ca70db07697a091d8c23972b55b0b20fc0eebc1ac6c2ae427d783291c7fcb2e3f7417d279fea78ce1eac2d2293e53579abbef4960a1e290bd023e2999d8ff423d01080d449ce5d14ca89c94e277e8e0bb14fb91a0b71129920ae4411e77685287611f4d2aaf66b8fc5dc
          type: general_consistency
          witness:
            {}
        type: general_consistency
    Organization:
      title: Organization
      required:
        - description
        - name
      type: object
      properties:
        name:
          type: string
          description: Name of `Organization` being created
          readOnly: false
          example: 'ACME Inc.'
        description:
          type: string
          description: Description of `Organization` being created
          readOnly: false
          example: 'Organization for testing'
        id:
          type: string
          format: UUID
          description: ID of referenced `Organization`. _UUID as specifed by RFC4122_
          readOnly: true
          example: a7e165dd-2d91-4f1e-b025-6ef2c5514603
        user_id:
          type: string
          format: UUID
          description: ID of `User` that created `Organization`. _UUID as specifed by RFC4122_
          readOnly: true
          example: 'ce69ea1c-7f0a-418b-9ecf-28ce7eca09e8'
        created_at:
          type: string
          format: Date-time
          description: Timestamp indicating date and time of `Organization` creation
          readOnly: true
          example: '2021-04-16T15:05:23.130Z'
        metadata: 
          type: object
          nullable: true     
      example:
        name: ACME Inc.
        description: Organization for testing
        id: a7e165dd-2d91-4f1e-b025-6ef2c5514603
        user_id: ce69ea1c-7f0a-418b-9ecf-28ce7eca09e8
        created_at: '2021-04-16T15:05:23.130Z' 
        metadata: {}
    Participant:
      title: Participant
      type: object
      description: Party to a Baseline `Workgroup` or `Workflow` context. 
      properties:
        address:
          type: string
          description: Wallet address of associated `Organization`
          example: '0x2f90A6D021db21e1B2A077c5a37B3C7E75D15b7e'
        metadata:
          type: object
          description: ''
        api_endpoint:
          type: string
          description: URL of the baseline API, which may not be exposed to the WAN
          example: https://api_endpoint/api/v1/endpoint
        messaging_endpoint:
          type: string
          description: Publicly-accessible TCP endpoint where the `Participant` receives inbound protocol messages
          example: https://api_endpoint/api/v1/messaging
      example:
          address: '0x1f4a6f3bfdea8fe1539ad538421cba0668bf8edf'
          metadata: {}
          api_endpoint: https://api_endpoint/api/v1/endpoint
          messaging_endpoint: https://api_endpoint/api/v1/messaging
    ProtocolMessage:
      title: Protocol Message
      type: object
      description: Baseline protocol message
      properties:
        baseline_id:
          type: string
          format: UUID
          readOnly: false
          description: ID of associated baseline 
        opcode:
          type: string
          enum: 
            - BLINE
            - JOIN
            - SYNC
        sender:
          type: string
        recipient:
          type: string
        shield:
          type: string
        identifer:
          type: string
          format: UUID
          readOnly: true
        signature:
          type: string
        type:
          type: string
        payload:
          $ref: '#/components/schemas/ProtocolMessagePayload'
    ProtocolMessagePayload:
      title: Protocol Message Payload
      description: Baseline protocol message payload
      properties:
        object:
          $ref: '#/components/schemas/Object'
        proof:
          type: string
        type:
          type: string
          description: ''
        witness:
          $ref: '#/components/schemas/Witness'
    Prover:
      title: Prover
      description: 'A state synchronization and consistency mechanism for completing on- and off-chain state transitions.'
      type: object
      properties:
        created_at:
          type: string
          description: Date and time of `Prover` creation
          format: date-time
          readOnly: true
          example: '2021-02-27T14:26:06.864Z'
        curve:
          type: string
          description: Pairing-friendly elliptic curve
          readOnly: false
          example: BN256
          default: 
        description:
          type: string
          description: User-defined descriptor of the `Prover`
          readOnly: false
          example: 'Prover example description'
        id:
          type: string
          format: UUID
          description: ID for the `Prover`. _UUID as specified by RFC4122_
          readOnly: true
          example: 'ce0319c8-ddc8-4d46-a16c-c506f5dae9a0'
        identifier:
          type: string
          description: Prover identifier
          example: Cubic
        name:
          type: string
          description: User-defined name of `Prover`
          readOnly: false
          example: 'Prover example name'
        type:
          type: string
          description: Kind of `Prover`
          readOnly: false
          example: 'circuit'
        proving_key_id:
          type: string
          format: UUID
          description: ID of `Key` used for proving the `Prover`. _UUID as specified by RFC4122_
          readOnly: false
          example: 'f2a9e144-79c1-4379-bee8-006f3401f4df'
        vault_id:
          type: string
          format: UUID
          description: ID of host `Vault`. _UUID as specified by RFC4122_
          readOnly: false
          example: '0ca9331a-d3fb-401c-b00b-5ada557c1056'
        verifying_key_id:
          type: string
          format: UUID
          description: ID of `Key` used for verifying the `Prover`. _UUID as specified by RFC4122_
          readOnly: false
          example: '2268935e-c21e-4891-88cc-d877cf496faf'
        provider:
          type: string
          description: Prover provider
          example: gnark
        proving_scheme:
          type: string
          description: Proving scheme to be used
          example: groth16
        status:
          type: string
          description: Status of `Prover`
          enum: 
            - init
              compiling
              compiled
              pending_setup
              running_setup
              deploying_artifacts
              provisioned
        store_id:
          type: string
          description: ID of the persistent store instance
      required:
        - name
        - identifier
        - provider
        - proving_scheme
        - curve
    ProveRequest:
      title: Prove request
      type: object
      properties:
        witness:
          $ref: '#/components/schemas/Witness'
    Secret:
      title: Secret
      required:
        - description
        - name
        - type
        - vault_id
        - value
      type: object
      properties:
        id:
          type: string
          format: UUID
          readOnly: true
          description: ID of `Secret`. _UUID as specified by RFC4122_
        created_at:
          type: string
          readOnly: true
          description: Date-time of `Secret` creation
        vault_id:
          type: string
          readOnly: false
          description: ID of `Vault` associated with reference `Secret`. _UUID as specified by RFC4122_
        type:
          type: string
          readOnly: false
          description: Type of `Secret`
        name:
          type: string
          readOnly: false
          description: User-defined name of `Secret`
        description:
          type: string
          readOnly: false
          description: User-defined descriptor of reference `Secret`
        value:
          type: string
          readOnly: false
      example:
        id: e9138dd7-b429-410a-bfa8-2a506d9e4297
        created_at: '2021-04-17T20:35:34.062+0000'
        vault_id: 22e48752-7bff-4daa-89b3-91053bd509f2
        type: sample secret
        name: 'secret #1'
        description: This secret is being stored for demonstration purposes
        value: 0x
    State:
      title: State
      description: The account state of an `Organization`, which must only be changed as a result of a valid transaction (i.e., a successful `Workstep` execution) by way of a `StateClaim`.
      type: object
      required:
        - id
        - account_id
      properties:
        id:
          type: string
          format: UUID
          description: ID of referenced `State`. _UUID as specified by RFC4122_
          readOnly: true
        account_id:
          type: string
          format: UUID
          description: ID of the `Account`. _UUID as specified by RFC4122_
          readOnly: false
        address: 
          type: string
          description: Address of the state account. By default this is the anonymous on-chain address of the `Organization`. 
          example: '0x391a38d6cca800e28c6b83f3aff4bebb9c0dab00'
        nonce:
          type: integer
          description: Nonce of associated `Account`.
          readOnly: false
        prover_id:
          type: string
          format: UUID
          description: ID of the associated `prover`. _UUID as specified by RFC4122_
          readOnly: false  
        epoch: 
          type: string
          format: uint64
          description: The period during which the state was valid
          example: '1'
        state_claims: 
          type: array
          description: List of `StateClaim` objects required to verify the `State`
          items: 
            $ref: '#/components/schemas/StateClaim'
    StateClaim:
      title: State Claim
      description: Representation of a valid state as claimed by a workgroup participant.
      type: object
      properties:
        cardinality: 
          type: string
          format: uint256
          description: Root index of a verifiable state
        path:
          type: string
          description: Path containing the siblings needed to reconstruct the root at `cardinality`
        root:
          type: string
          description: ''
        values: 
          type: array
          description: List of hashed proofs corresponding to the values at `cardinality` and each sibling `path`. 
          items: 
            type: string
    Token:
      title: Token
      type: object
      properties:
        id:
          type: string
          description: ID of `Token` issued. _UUID as specified by RFC4122_
          readOnly: true
        scope:
          type: string
          description: Scope of authorization request
          enum:
            - offline_access
          readOnly: false
        expires_in:
          type: number
          description: Time in minutes until `Token` will no longer be valid
          readOnly: true
          nullable: true
        access_token:
          type: string
          description: JSON formatted Web Token
          format: password
          readOnly: true
          nullable: true
        refresh_token:
          type: string
          description: JSON formatted Web Token
          format: password
          readOnly: true
          nullable: true
        token:
          type: string
          description: JSON formatted Web Token
          format: password
          readOnly: true
          nullable: true
        permissions:
          type: number
          description: 'Authorized permissions for `Token`, expressed as a bitmask'
          nullable: true
          readOnly: true
        organization_id:
          type: string
          description: ID of `Organization` requiring authorization. _UUID as specified by RFC4122_
          nullable: true
          writeOnly: true
        application_id:
          type: string
          description: ID of `Workgroup` requiring authorization. _UUID as specified by RFC4122_
          nullable: true
          writeOnly: true
      example:
        id: r19e831-43fd-237e-8b43-12af828ba3e3
        scope: offline_access
        expires_in: 900
        access_token: <JWT>
        refresh_token: <JWT>
        permissions: 415
    Transaction:
      title: Transaction
      description: Record of exchange of data between two entities. 
      properties:
        id:
          type: string
          description: ID for a specific `Transaction`. _UUID as specified by RFC4122_
          format: UUID
          readOnly: true
          example: bb0e8038-8e72-46db-a08d-204f804a24c1
        created_at:
          type: string
          description: Date and time of `Transaction` creation
          format: date-time
          readOnly: true
          example: '2021-04-21T02:12:11.158Z'
        network_id:
          type: string
          description: ID of the `Network` on which the Transaction will be broadcast. _UUID as specified by RFC4122_
          format: UUID
          readOnly: false
          example: 'bddbc2ac-8531-4f19-962c-f19d93b68fbb'
        user_id:
          type: string
          description: ID for the `User` that created `Transaction`. _UUID as specified by RFC4122_
          format: UUID
          readOnly: true
          example: '52fe9407-5115-43ce-9115-5fcbcd0457f1'
        wallet_id:
          type: string
          description: ID of `Wallet` to be used for signing the `Transaction`. _UUID as specified by RFC4122_
          format: UUID
          readOnly: false
          example: '9c193c18-db84-4506-8462-9e604d1620b9'
        key_id:
          type: string
          description: ID of the Vault Key which will be used to sign the `Transaction`; required in the absence of a `signer`. _UUID as specified by RFC4122_
          format: UUID
          example: 'dcb00685-6434-4f4b-b9df-e929bb90d421'
        account_id:
          type: string
          description: ID of `Account` to be used for `Transaction` creation. _UUID as specified by RFC4122_
          example: '5479b170-b8aa-4ac3-94a6-afec5d2eb6b6'
        hd_derivation_path:
          type: string
        to:
          type: string
          description: 'Public network address of the recipient of the `Transaction`., if applicable'
          example: '0x1f4a6f3bfdea8fe1539ad538421cba0668bf8edf'
        value:
          type: number
          description: 'Total amount of value, represented in the smallest standard denomination of native currency for the target Network (i.e., wei), to be transferred by the sender to the recipient'
        data:
          type: object
          description: ''
          nullable: true
        hash:
          type: string
          description: ''
          readOnly: true
        status:
          type: string
          description: ''
          readOnly: true
        ref:
          type: object
          description: ''
          nullable: true
          readOnly: true
        description:
          type: object
          nullable: true
        block:
          type: number
          description: ''
          readOnly: true
        block_timestamp:
          type: string
          description: ''
          readOnly: true
          example: '2021-04-21T02:12:11.158Z'
        broadcast_at:
          type: string
          description: ''
          format: date-time
          readOnly: true
          example: '2021-04-21T02:12:11.158Z'
        finalized_at:
          type: string
          description: ''
          format: date-time
          readOnly: true
          example: '2021-04-21T02:12:11.158Z'
        published_at:
          type: string
          description: ''
          format: date-time
          readOnly: true
          example: '2021-04-21T02:12:11.158Z'
        queue_latency:
          description: ''
          type: integer
          readOnly: true
        network_latency:
          description: ''
          type: integer
          readOnly: true
        e2e_latency:
          description: ''
          type: integer
          readOnly: true
      example:
        id: 99a61ee5-73ea-46d1-a434-b6a2a908bc51
        created_at: '2021-04-21T02:12:11.158Z'
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        user_id: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        wallet_id: 0fda2f96-d957-4f65-9e92-fa5092c51751
        hd_derivation_path: m/44'/60'/0'/0/0
        to: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        value: 0
        hash: 698465416514684984piouhygiuytfruytdcghbkjhbvjyhdc
        status: success
        block: 10079406
        block_timestamp: '2021-04-21T02:12:05.000Z'
        finalized_at: '2021-04-21T02:12:14.277Z'
    UnsealVault:
      title: Unseal Vault
      description: Unseals the specified `Vault`
      required:
        - key
      type: object
      properties:
        key:
          type: string
          description: Private key required for unsealing the target `Vault`
      example:
        key: quantum mirror summer general keep west promote satisfy limit butter mother oyster lazy whip earn spot ticket protect mean play script peace parent intact
    User:
      title: User
      required:
        - email
        - first_name
        - last_name
      type: object
      description: An individual participant in the baseline process. Can be virtual or non-virtual. A virtual user acts as a placeholder account that grants access to a specified `Organization` or `Workgroup`. 
      properties:
        id:
          type: string
          description: ID for the reference `User`. Expressed as a _UUID as specified by RFC4122_
          readOnly: true
          example: 7r19e831-43fd-237e-8b43-12af828ba3e3
        created_at:
          type: string
          description: Date and time of `User` creation
          readOnly: true
          example: '2021-01-27T03:19:33.349Z'
        name:
          type: string
          description: Full name of `User`
          example: Joe User
          readOnly: true
        first_name:
          type: string
          description: First name of `User`
          example: Joe
          readOnly: false
        last_name:
          type: string
          description: Last name of `User`
          example: User
          readOnly: false
        email:
          type: string
          description: Email address for `User`
          example: joeusr@baseline.local
          readOnly: false
        password:
          type: string
          format: password
          writeOnly: true
          example: s3cr37
        permissions:
          type: integer
          description: Authorized privileges for `User`
          readOnly: true
          example: 415
        privacy_policy_agreed_at:
          type: string
          description: Date and time of acceptance of the privacy policy
          readOnly: true
          example: '2021-01-27T03:19:33.349Z'
        terms_of_service_agreed_at:
          type: string
          description: Date and time of acceptance of the terms of service
          readOnly: true
          example: '2021-01-27T03:19:33.349Z'
      example:
        id: 7r19e831-43fd-237e-8b43-12af828ba3e3
        created_at: '2021-01-27T03:19:33.349Z'
        name: Joe User
        first_name: Joe
        last_name: User
        email: joeusr@baseline.local
        permissions: 415
        privacy_policy_agreed_at: '2021-01-27T03:19:33.349Z'
        terms_of_service_agreed_at: '2021-01-27T03:19:33.349Z'
    Vault:
      title: Vault
      type: object
      description: Provides key management with a focus on providing advanced privacy and messaging capabilities (i.e., zero-knowledge proofs, SNARK-friendly hash functions, double-ratchet algorithm, etc.)
      properties:
        id:
          type: string
          description: ID for a specific `Vault` instance. _UUID as specified by RFC4122_
          format: UUID
          readOnly: true
          example: f1f29322-b8fe-4adf-95ad-af1585e823c5
        created_at:
          type: string
          description: Date and time of `Vault` creation
          format: date-time
          readOnly: true
          example: '2021-04-21T02:12:11.158Z'
        name:
          type: string
          description: User-defined identifier for a specific `Vault` instance
          readOnly: false
          example: 'Demo vault name'
        description:
          type: string
          description: User-defined summary of a specific `Vault`  instance
          readOnly: false
          example: 'Sample vault description'
    VerifyProof:
      title: Verify Proof Request
      description: Hierarchical deterministic (HD) wallet in accordance with BIP44
      required:
        - proof
        - witness
      type: object
      properties:
        witness:
          $ref: '#/components/schemas/Witness'
        proof:
          type: string
          description: The hex-formatted proof to verify
        store:
          type: boolean
          description: 'When true, the proof hash is written to the configured prover store'
      example:
        witness:
          {}
    Wallet:
      title: Wallet
      type: object
      properties:
        id:
          type: string
          description: ID for a unique `Wallet`. _UUID as specified by RFC4122_
          format: UUID
          readOnly: true
          example: 4ee831ae-327f-4a79-bd74-7e9f56ce40fa
        created_at:
          type: string
          description: Date and time of `Wallet` creation
          readOnly: true
          example: '2021-01-27T03:19:33.349Z'
        network_id:
          type: string
          format: UUID
          readOnly: false
          description: ID for the target `Network`. _UUID as specified by RFC4122_
          example: 84a139c0-2e20-476c-91d0-618f7332189e
        user_id:
          type: string
          description: ID for the `User` that created a `Wallet`. _UUID as specified by RFC4122_
          readOnly: true
          example: 8136f2d5-a993-4ec7-88af-45a01e85feaa
        vault_id:
          type: string
          description: ID for the `Vault` that created a `Wallet`. _UUID as specified by RFC4122_
          format: UUID
          readOnly: true
          example: aa1b60d4-4f77-438d-8fca-cb514596e6c3
        key_id:
          type: string
          description: ID of private key used to create `Wallet`. _UUID as specified by RFC4122_
          format: UUID
          readOnly: true
          example: 5c928a43-9897-417a-9851-768e19b3cecd
        purpose:
          type: integer
          description: Purpose is a constant set to 44' (or 0x8000002C) following the BIP43 recommendation. It indicates that the subtree of this node is used according to this specification. Hardened derivation is used at this level
          format: string
          readOnly: false
          example: 44
        public_key:
          type: string
          description: Public signing key of referenced `Wallet`
          readOnly: true
          example: xpub661MyMwAqRbcGdYXwwnwcnrH51AxyF3kkTeEt6iZfNDXsg4MLPgV7bEZ2v4uCx9djAboy6vSv3VbHPc6hf4Do8wb7FpJCuG7aMBwH2QgLJu
      example:
        id: bbc1195e-d131-4b2f-b1a8-1b6f34b55d3e
        created_at: '2021-03-30T02:50:17.155Z'
        user_id: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        vault_id: 190822c9-62f5-4caf-a419-df735a793b2f
        key_id: db9e6e21-23b0-497d-a02c-8a8813f8bf2d
        purpose: 44
        public_key: xpub661MyMwAqRbcGdYXwwnwcnrH51AxyF3kkTeEt6iZfNDXsg4MLPgV7bEZ2v4uCx9djAboy6vSv3VbHPc6hf4Do8wb7FpJCuG7aMBwH2QgLJu
    Witness:
      title: Witness
      type: object
      properties: {}
      description: |- 
        Public and private inputs used to generate the `Proof`. Payload can be delivered as a JSON object or chunked and streamed. Example is dependent on `Prover` parameters. 
    Workgroup:
      title: Workgroup
      description: |-
        A `Workgroup` represents a logical collection of resources provisioned within the baseline containerized microservices architecture. A `Workgroup` is immutably configured upon initialization with support for a primary 'Network' (or "mainnet").
      required:
        - name
        - type
      type: object
      properties:
        id:
          type: string
          description: ID for the `Workgroup`. _UUID as specified by RFC4122_
          format: UUID
          readOnly: true
          example: bdf94fc0-63ad-4ee9-ac75-7eb63365d0f6
        created_at:
          minLength: 1
          type: string
          description: Date and time of record creation
          format: date-time
          readOnly: true
          example: '2021-05-21T12:36:52.977Z'
        network_id:
          type: string
          description: ID for the host `Network` of the `Workgroup`. _UUID as specified by RFC4122_
          format: UUID
          example: 07102258-5e49-480e-86af-6d0c3260827d
        user_id:
          maxLength: 36
          minLength: 1
          type: string
          description: ID for the `User` that created the `Workgroup`. _UUID as specifed by RFC4122_
          format: UUID
          example: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        name:
          minLength: 1
          type: string
          description: User-defined name of the `Workgroup`
        description:
          type: string
          description: User-defined `Workgroup` descriptor
          example: Sample workgroup description
        type:
          minLength: 1
          type: string
          description: 'Designates `Workgroup` type. In a Baseline `Workgroup`, will always be `baseline`'
          example: baseline
          default: baseline
        config:
          $ref: '#/components/schemas/WorkgroupConfig'
        hidden:
          type: boolean
      example:
        id: bdf94fc0-63ad-4ee9-ac75-7eb63365d0f6
        created_at: '2021-05-21T12:36:52.977Z'
        network_id: 07102258-5e49-480e-86af-6d0c3260827d
        user_id: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        name: Demo Workgroup
        description: Workgroup intended for demonstration purposes
        type: baseline
        config:
          baselined: true
          webhook_secret: 1dfd34519a06420d8a6ed18afdffe932
        hidden: false
    WorkgroupConfig:
      title: Workgroup Config
      description: Configuration object intended for use by integrated services
      type: object
      properties:
        webhook_secret:
          minLength: 1
          type: string
        network_id:
          type: string
          readOnly: false
          description: ID of parent `Network`. _UUID as specifed by RFC4122_
          example: b521e245-6391-4d7a-9e9e-a786157fa0a3
    Workflow:
      title: Workflow
      type: object
      description: Baseline `Workflow` context containing a subset of `Workgroup` participants and series of `Workstep` instances.
      properties:
        id:
          type: string
          format: UUID
          description: ID of `Workflow`. _UUID as specified by RFC4122_
          example: 4f818bf4-ef2a-4d0b-b4e7-1367f8c71a02
        identifier:
          type: string
        participants:
          type: array
          items:
            type: string
            description: List of `Organization` instances authorized to participate in the referenced `Workflow`.
        shield:
          type: string
        worksteps:
          description: List of `Workstep` instances. 
          type: array
          items:
            $ref: '#/components/schemas/Workstep'
    Workstep:
      title: Workstep
      description: |-
        One stepwise state transition in a `Workflow` represented by a `Prover`. A `Workstep` may or may not be required to reach on-chain finality prior to the execution of the next `Workstep` in a `Workflow`.
      type: object
      properties:
        id:
          type: string
          format: UUID
          description: ID of `Workstep`. _UUID as specifed by RFC4122_
          example: '2fffec13-590e-41eb-9a84-69ed881e0036'
          readOnly: true
        prover_id:
          type: string
          format: UUID
          description: ID of the associated `Prover`. _UUID as specifed by RFC4122_
          example: 'dd615561-83e6-4f53-ac0f-aaf1749df139'
          readOnly: false
        participants:
          description: List of `Organization` instances authorized to participate in the referenced `Workstep`.
          type: array
          items:
            $ref: '#/components/schemas/Participant'
        require_finality:
          type: boolean
          default: false
          description: When true, the resulting proof from the referenced `Workstep` will be written to the underlying mainnet.
          example: true
        workflow_id:
          type: string
          format: UUID
          description: ID of associated `Workflow`. _UUID as specifed by RFC4122_
          example: f9227803-5541-4c13-a554-f6980f03362a
        state_claims:
          type: array
          items:
            $ref: '#/components/schemas/StateClaim'
      example: 
        id: '2fffec13-590e-41eb-9a84-69ed881e0036'
        prover_id: 'dd615561-83e6-4f53-ac0f-aaf1749df139'
        participants:
          - $ref: '#/components/schemas/Participant'
        require_finality: true
        workflow_id: 'f9227803-5541-4c13-a554-f6980f03362a'
  responses:
    OK:
      description: The request was successful
    NoContent:
      description: The request was successful but did not return a response
    Accepted:
      description: 'The request has been accepted for processing, but the processing has not been completed'
    Success:
      description: The request was successful and a new entity was created
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
          example:
            code: 401
            message: 'The request required an API Authorization header, or one was provided which could not be authenticated'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
          example:
            code: 403
            message: The supplied API Authorization header does not have permission to access the requested resource. Please verify that you have sufficient permissions and try again
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
          example:
            code: 404
            message: Platform did not find the requested resource
    TooManyRequests:
      description: Too many requests
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
            example:
              code: 429
              message: The request was not accepted due to exceeding the rate limit
    InternalServerError:
      description: Not Implemented
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
          example:
            code: 500
            message: The requested resource is not implemented by the platform
    ServiceUnavailable:
      description: Service Unavailable
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
          example:
            code: 503
            message: The request cannot be fulfilled due to temporary unavailability of a backend service
  parameters:
    page:
      name: page
      in: query
      description: Limits resulting response to the page number specified
      required: false
      schema:
        type: integer
    results-per-page:
      name: rpp
      in: query
      description: Sets the number of results included per page
      required: false
      schema:
        type: integer
    public:
      name: public
      in: query
      description: When `TRUE`, limits results to non-private records
      required: false
      schema:
        type: boolean
  headers:
    X-Total-Results-Count:
      schema:
        type: integer
        description: Number of total query hits across all pages
        example: 14
  securitySchemes:
    bearerAuth:
      type: http
      description: 'The presence of a `bearer` API token is required to authorize most Baseline API calls. A `bearer` API token is an encoded JWT which contains a subject claim (`sub`) which references an authorized entity (i.e., the `User`, `Application` or `Organization`). The authorized entity uses a signed `bearer` authorization Token to access one or more resources for which the Token was authorized.  Unless otherwise noted, all API requests must include a header such as `Authorization: bearer <jwt>`'
      scheme: bearer
      bearerFormat: JWT
    OAuth2:
      type: oauth2
      description: 'OAuth2 support. In accordance with the OAuth 2.0 specification, when an entity (`User`, `Organization`, `Workgroup`) is authorized and the requested `scope` includes `offline_access`, a refresh token is vended and returned on behalf of the caller. This refresh token is long-lived and can be used to authorize short-lived access tokens using the `refresh_token `grant type on subsequent authorization requests. This pattern is useful for machine-to-machine applications; a secure practice is to store the long-lived refresh token in a Vault instance (i.e., as a secret), read it into application memory during container initialization and then use it to authorize a short-lived access token. If the container remains running long enough for the access token to expire, the refresh token should once again be used to seamlessly authorize a new access token.'
      flows:
        implicit:
          authorizationUrl: 'https://ident.provide.services/api/v1/oauth/authorize'
          scopes:
            email: email and password
            offline_access: access/refresh token authorization model
            profile: ''
            openid: ''
externalDocs:
    description: Privacy Policy
    url: 'https://provide.services/privacy-policy'